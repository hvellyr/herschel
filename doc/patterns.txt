PATTERN                               EXAMPLES

Function calls:

   f(a, b, c: x, d: y, u, v, w)       slot(a, 1)


Expressions:

   a op b                             a ** 2
   op c                               -1
                                      not #t

"Statements":

  key (a : Int = m, b, c)             if (a == 5)
    expr                                hello()
  post-term                           else
    expr                                world()

                                      for (i = 0 .. 10)
                                        outln(i)
                                      finally
                                        0

                                      select (x) {
                                        a -> b
                                        c -> d
                                      }


Events:

  on kind(a : Type)                   on signal(a : Io) outln(a)
    expr                              on exit(r) r
                                      on init(self) ...
                                      on delete(v) ...

                                      -- wait for thread 1-3 to finish
                                      on sync(thread1, thread2, thread3) {
                                        ...
                                      }

                                      -- wait for single resource access
                                      on mutex(resource) {
                                      }


Definitions:

  def modifier name(params) : Type    def type Point(Object) : Copyable {
    body                                slot x : Int, init: 0
                                        slot y : Int, init: 1
  let modifier name(params) : Type    }
    expr
                                      let loop(nl)
                                         if (nil == #nil)
                                           #f
                                         else
                                           loop(nl.cdr)


