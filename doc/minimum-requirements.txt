Motivation

The following points are things I would like to see in a mainstream
programming language for daily use:

  - common syntax (prob. C-like)
  - compile to native code
  - exceptions/conditions
  - first class classes
  - first class functions and closures
  - foster functional programming
  - garbage collection
  - proper lexical scoped
  - multiple return values
  - macros
  - multi dispatch functions
  - named parameters
  - namespaces
  - object oriented, class-based, interfaces, polymorphism
  - parameterized classes
  - simpler concurrency
  - namespaces and modules
  - operator overloading
  - Keyword and rest parameters

Here's what
(http://steve-yegge.blogspot.com/2007/02/next-big-language.html) thinks the
Next-Big-Thing will contain:


Here's a short list of programming-language features that have become
ad-hoc standards that everyone expects:

                                                                        Herschel?
- Object-literal syntax for arrays and hashes                           yes
- Array slicing and other intelligent collection operators              yes
- Perl 5 compatible regular expression literals
+ Destructuring bind (e.g. x, y = returnTwoValues())                    yes
+ Function literals and first-class, non-broken closures                yes
+ Standard OOP with classes, instances, interfaces, polymorphism, etc.  (yes)
- Visibility quantifiers (public/private/protected)
- Iterators and generators                                              yes
- List comprehensions                                                   yes
+ Namespaces and packages                                               yes
- Cross-platform GUI                                                    future
+ Operator overloading                                                  yes
+ Keyword and rest parameters                                           yes
- First-class parser and AST support                                    yes
- Static typing and duck typing                                         yes
- Type expressions and statically checkable semantics
- Solid string and collection libraries                                 yes
- Strings and streams act like collections                              yes
 
Additionally, NBL will have first-class continuations and call/cc. I hear
it may even (eventually) have a hygienic macro system, although not in any
near-term release.

Not sure about threads. I tend to think you need them, although of course
they can be simulated with call/cc. I've also noticed that languages with
poor threading support tend to use multiprocessing, which makes them more
scalable across machines, since by the time you've set up IPC, distributing
across machines isn't much of an architectural change. But I think threads
(or equivalent) are still useful. Hopefully NBL has a story here.











Multiple returnvalues

  The basic syntax

    let x, y, z = function() { #[1, 2, 3] )

    x, y, z = f()

  Also possible:

    x, y, z = #[1, 2, 3]

    def f(val : Vector)
      x, y, z = val
  
  The last expression will fail if val has less or more elements than 3, so
  better to write:

    def f(val : Vector)
      x, y, z = val[0 .. 3]


  The return type for such a function is 

    : (Int, Int, Int)

  or

    : Tuple(Int, Int, Int)


Concurrency

Simplify concurrent programming.  Offer simple but powerful support for
splitting up code flow.

Example "on sync"

  let f1 = task compute1()
  let f2 = task compute2()
  let f3 = task compute3()

  on sync(f1, f2, f3)
    f1 + f2 + f3

Example manual mutexes "on mutex"

  def f(m1 : Mutex)
    on mutex(m1)
      compute1()


Condition variables

  def f(c1 : Condition)
    on wait(c1)
      compute1()
    else
      #f


  let pipe1 <- task #function() compute1()

  let pipe2 <- task #function() compute2(pipe1)

  on sync(task function(inport : Port) {
            while (not(eof(inport))) {
              let x = inport.read
              outln(x)
            }
          }) {
  }
