-- This file is part of the herschel package
--
-- Copyright (c) 2010-2011 Gregor Klinke
-- All rights reserved.
--
-- This source code is released under the BSD License.

module lang

export public (*)


------------------------------------------------------------------------------
-- general type specifications
------------------------------------------------------------------------------

def type Number : Object
    ~ Any number. ~

def type Complex : Number
    ~ Complex numbers like 3+2i ~

def type Real : Number
    ~ The set of numbers that describes all possible positions along
    a one-dimensional line. ~

def type Rational : Number
    ~ A rational of type p/q, where p and q are integers. ~

def type Integer : Number
    ~ Whole numbers, positive or negative. ~


------------------------------------------------------------------------------
-- Marker types
------------------------------------------------------------------------------

def type Exact
    ~ Marker typer to declare a number type as being an (arbitrary) exact
    representation of the value.~

def type Approximate
    ~ Marker type to declare a number type as being an approximate
    (inexact) representation of the value. ~

def type BoundedBelow
    ~ Marker type to declare a number type as being bounded on the below range. ~
def type BoundedAbove
    ~ Marker type to declare a number type as being bounded on the above range. ~

def type Bounded : (BoundedBelow, BoundedAbove)
    ~ Marker type to declare a number type as being bounded on the below
    and above range. ~

def type Unsigned
    ~ Marker type to declare a number type as being not capable of
    representing signed numbers. ~


------------------------------------------------------------------------------
-- Real data types
------------------------------------------------------------------------------

def type Int8 : (Integer, Exact, Bounded)
    ~ Signed 8bit integer, range is -2^7 .. 2^7-1 ~

def type UInt8 : (Integer, Exact, Bounded, Unsigned)
    ~ Unsigned 8bit integer, range is 0 .. 2^8-1 ~

def type Int16 : (Integer, Exact, Bounded)
    ~ Signed 16bit integer, range is -2^15 .. 2^15-1 ~

def type UInt16 : (Integer, Exact, Bounded, Unsigned)
    ~ Unsigned 16bit integer, range is 0 .. 2^16-1 ~

def type Int32 : (Integer, Exact, Bounded)
    ~ Signed 32bit integer, range is -2^31 .. 2^31-1 ~

def type UInt32 : (Integer, Exact, Bounded, Unsigned)
    ~ Unsigned 32bit integer, range is 0 .. 2^32-1 ~

def type Int64 : (Integer, Exact, Bounded)
    ~ Signed 64bit integer, range is -2^63 .. 2^63-1 ~

def type UInt64 : (Integer, Exact, Bounded, Unsigned)
    ~ Unsigned 64bit integer, range is 0 .. 2^64-1 ~

def type Float32 : (Real, Approximate, Bounded)
    ~ 32bit ieee754 float, range is +/- 3.4E +/- 38 ~

def type Float64 : (Real, Approximate, Bounded)
    ~ 64bit ieee754 float, range is +/- 1.7E +/- 308 ~

def type Float128 : (Real, Approximate, Bounded)
    ~ 128bit ieee754 float, range is +/- 1.18 +/- 4932 ~

def type BigInt : (Integer, Exact)
    ~ Arbitrary large integer.  Under normal conditions only limited by
    system resources. ~

def type BigReal : (Real, Exact)
    ~ Arbitrary large and precise real.  Under normal conditions only
    limited by system resources. ~


------------------------------------------------------------------------------
-- derived types
------------------------------------------------------------------------------

------------------------------------------------------------------------------
-- Other names for the more technical names
------------------------------------------------------------------------------

def alias Byte   = Int8
def alias UByte  = UInt8
def alias Octet  = UInt8

def alias Short  = Int16
def alias UShort = UInt16

def alias Int    = Int32
def alias UInt   = UInt32
def alias Ordinal = UInt32

def alias Long   = Int64
def alias ULong  = UInt64

def alias Float      = Float32
def alias Double     = Float64
def alias LongDouble = Float128


----------------------------------------------------------------------
-- actions
----------------------------------------------------------------------

def generic add(left @ 'T, right @ 'T) : 'T ...
    ~ Computes the addition of @var{left} and @var{right}. ~

def generic subtract(left @ 'T, right @ 'T) : 'T ...
    ~ Computes the difference of @var{left} and @var{right}. ~

def generic multiply(left @ 'T, right @ 'T) : 'T ...
    ~ Computes the product of @var{left} and @var{right}. ~

def generic divide(dividend @ 'T, divisor @ 'T) : 'T ...
    ~ Computes the quotient of @var{dividend} and @var{divisor}.  If
    @var{divisor} is 0 an @type{DivisionByZero} exception is raised. ~

-- end of lang/numbers
