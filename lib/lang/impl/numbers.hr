-- This file is part of the herschel package
--
-- Copyright (c) 2010-2011 Gregor Klinke
-- All rights reserved.
--
-- This source code is released under the BSD License.

module lang


------------------------------------------------------------------------------
-- compare operators
------------------------------------------------------------------------------

def macro OPGF
  | « def OPGF ?n:name(?t0:name, ?op:operator, ?t1:name) »
    -> « def ?n(l @ ?t0, r @ ?t1) -> Bool
           l as ?t0 ?op r as ?t1
       »

def macro INT_OP_1
  | « def INT_OP_1 ?n:name(?t0:name, ?op:operator, ?basety:name) »
    -> « def OPGF ?n(?t0, ?op, ?basety ## "8")
         def OPGF ?n(?t0, ?op, ?basety ## "16")
         def OPGF ?n(?t0, ?op, ?basety ## "32")
         def OPGF ?n(?t0, ?op, ?basety ## "64")
       »

def macro INT_OP_2
  | « def INT_OP_2 ?basety:name ?n:name(?op:operator) »
    -> « def INT_OP_1 ?n(?basety ## "8", ?op, ?basety)
         def INT_OP_1 ?n(?basety ## "16", ?op, ?basety)
         def INT_OP_1 ?n(?basety ## "32", ?op, ?basety)
         def INT_OP_1 ?n(?basety ## "64", ?op, ?basety)
       »

def INT_OP_2 Int equal?(==)
def INT_OP_2 Int unequal?(<>)
def INT_OP_2 Int less-equal?(<=)
def INT_OP_2 Int greater-equal?(>=)
def INT_OP_2 Int less?(<)
def INT_OP_2 Int greater?(>)

def INT_OP_2 UInt equal?(==)
def INT_OP_2 UInt unequal?(<>)
def INT_OP_2 UInt less-equal?(<=)
def INT_OP_2 UInt greater-equal?(>=)
def INT_OP_2 UInt less?(<)
def INT_OP_2 UInt greater?(>)


-- def OPGF equal?(Float32, ==, Float32)
-- def OPGF equal?(Float32, ==, Float64)
-- def OPGF unequal?(Float32, <>, Float32)
-- def OPGF unequal?(Float32, <>, Float64)
-- def OPGF less?(Float32, <, Float32)
-- def OPGF less?(Float32, <, Float64)
-- def OPGF less-equal?(Float32, <=, Float32)
-- def OPGF less-equal?(Float32, <=, Float64)
-- def OPGF greater?(Float32, >, Float32)
-- def OPGF greater?(Float32, >, Float64)
-- def OPGF greater-equal?(Float32, >=, Float32)
-- def OPGF greater-equal?(Float32, >=, Float64)
--
-- def OPGF equal?(Float64, ==, Float32)
-- def OPGF equal?(Float64, ==, Float64)
-- def OPGF unequal?(Float64, <>, Float32)
-- def OPGF unequal?(Float64, <>, Float64)
-- def OPGF less?(Float64, <, Float32)
-- def OPGF less?(Float64, <, Float64)
-- def OPGF less-equal?(Float64, <=, Float32)
-- def OPGF less-equal?(Float64, <=, Float64)
-- def OPGF greater?(Float64, >, Float32)
-- def OPGF greater?(Float64, >, Float64)
-- def OPGF greater-equal?(Float64, >=, Float32)
-- def OPGF greater-equal?(Float64, >=, Float64)


def OPGF equal?(Bool, ==, Bool)
def OPGF unequal?(Bool, <>, Bool)

def OPGF equal?(Char, ==, Char)
def OPGF unequal?(Char, <>, Char)
def OPGF less?(Char, <, Char)
def OPGF less-equal?(Char, <=, Char)
def OPGF greater?(Char, >, Char)
def OPGF greater-equal?(Char, >=, Char)

def OPGF equal?(Keyword, ==, Keyword)
def OPGF unequal?(Keyword, <>, Keyword)

------------------------------------------------------------------------------
-- addition

def macro compute-integer-1
  | « compute-integer-1(?retv:name, ?lhs:name, ?other:name, ?op:operator) »
    -> « match (?other)
           | j : Int8   -> ?retv = ?lhs ?op j
           | j : Int16  -> ?retv = ?lhs ?op j
           | j : Int32  -> ?retv = ?lhs ?op j
           | j : Int64  -> ?retv = ?lhs ?op j

           | j : UInt8  -> ?retv = ?lhs ?op j
           | j : UInt16 -> ?retv = ?lhs ?op j
           | j : UInt32 -> ?retv = ?lhs ?op j
           | j : UInt64 -> ?retv = ?lhs ?op j

           |   : Any -> 0         -- raise TypeException
       »

def macro compute-integer
  | « compute-integer(?lvalue:name, ?op:operator, ?rvalue:name) »
    -> « {
           let t : Integer = 0
           match (?lvalue)
             | i : Int8  -> compute-integer-1(t, i, ?rvalue, ?op)
             | i : Int16 -> compute-integer-1(t, i, ?rvalue, ?op)
             | i : Int32 -> compute-integer-1(t, i, ?rvalue, ?op)
             | i : Int64 -> compute-integer-1(t, i, ?rvalue, ?op)

             | i : UInt8  -> compute-integer-1(t, i, ?rvalue, ?op)
             | i : UInt16 -> compute-integer-1(t, i, ?rvalue, ?op)
             | i : UInt32 -> compute-integer-1(t, i, ?rvalue, ?op)
             | i : UInt64 -> compute-integer-1(t, i, ?rvalue, ?op)

             |   : Any -> 0                        -- raise TypeException
           t
         }
       »

def add(one @ Integer, two @ Integer) -> Integer
  compute-integer(one, +, two)

def subtract(one @ Integer, two @ Integer) -> Integer
  compute-integer(one, -, two)

def multiply(one @ Integer, two @ Integer) -> Integer
  compute-integer(one, *, two)




def macro compare-integer-1
  | « compare-integer-1(?retv:name, ?lhs:name, ?other:name, ?op:operator) »
    -> « match (?other)
           | j : Int8   -> ?retv = ?lhs ?op j
           | j : Int16  -> ?retv = ?lhs ?op j
           | j : Int32  -> ?retv = ?lhs ?op j
           | j : Int64  -> ?retv = ?lhs ?op j

           |   : Any -> 0         -- raise TypeException
       »

def macro compare-integer-2
  | « compare-integer-2(?retv:name, ?lhs:name, ?other:name, ?op:operator) »
    -> « match (?other)
           | j : UInt8  -> ?retv = ?lhs ?op j
           | j : UInt16 -> ?retv = ?lhs ?op j
           | j : UInt32 -> ?retv = ?lhs ?op j
           | j : UInt64 -> ?retv = ?lhs ?op j

           |   : Any -> 0         -- raise TypeException
       »

def macro compare-integer
  | « compare-integer(?lvalue:name, ?op:operator, ?rvalue:name) »
    -> « {
           let t : Int = 0
           match (?lvalue)
             | i : Int8  -> compare-integer-1(t, i, ?rvalue, ?op)
             | i : Int16 -> compare-integer-1(t, i, ?rvalue, ?op)
             | i : Int32 -> compare-integer-1(t, i, ?rvalue, ?op)
             | i : Int64 -> compare-integer-1(t, i, ?rvalue, ?op)

             | i : UInt8  -> compare-integer-2(t, i, ?rvalue, ?op)
             | i : UInt16 -> compare-integer-2(t, i, ?rvalue, ?op)
             | i : UInt32 -> compare-integer-2(t, i, ?rvalue, ?op)
             | i : UInt64 -> compare-integer-2(t, i, ?rvalue, ?op)

             |   : Any -> 0                        -- raise TypeException
           t
         } »

def compare(one @ Integer, two @ Integer) -> Int
  compare-integer(one, <=>, two)






-- unary
-- not
-- negate
--
-- binary
-- add +
-- concat ++
-- subtract -
-- divide /
-- multiply *
-- exponent **
-- modulo mod
-- remainder rem
-- and and
-- or or
-- fold %
-- bitand AND
-- bitor OR
-- bitxor XOR
-- shift-left <<
-- shift-right >>
-- isa? isa
-- cast-to as
