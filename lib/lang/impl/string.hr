-- This file is part of the herschel package
--
-- Copyright (c) 2010-2011 Gregor Klinke
-- All rights reserved.
--
-- This source code is released under the BSD License.

module lang

import "lang/string.hr"
import "lang/stdlib.hr"
import "lang/copyable.hr"
import "lang/sliceable.hr"

extern ("C") {
  struct ATOM allocate_string_n(unsigned int items, Unichar c);
  int lang_string_compare(const struct ATOM atom0, const struct ATOM atom1);
  unsigned int lang_string_length(struct ATOM atom0);
  unsigned int lang_string_char_at_index(struct ATOM atom0, unsigned int idx);
  void lang_string_set_char_at_index(struct ATOM atom0, unsigned int idx, Unichar c);
}

-- builtin strings are really instances of the class @type{StringImpl}.
def class StringImpl : String
{
}

def class StringSlice(_str : String,
                      _from : Ordinal,
                      _to : Ordinal) : (Comparable, String)
{
  def slot str : String = _str
  def slot from : Ordinal = _from
  def slot to : Ordinal = _to
}




def equal?(one @ StringImpl, two @ StringImpl) : Bool
  lang_string_compare(one, two) == 0

def unequal?(one @ StringImpl, two @ StringImpl) : Bool
  lang_string_compare(one, two) <> 0

def less?(one @ StringImpl, two @ StringImpl) : Bool
  lang_string_compare(one, two) < 0

def greater?(one @ StringImpl, two @ StringImpl) : Bool
  lang_string_compare(one, two) > 0

def less-equal?(one @ StringImpl, two @ StringImpl) : Bool
  lang_string_compare(one, two) <= 0

def greater-equal?(one @ StringImpl, two @ StringImpl) : Bool
  lang_string_compare(one, two) >= 0

def compare(one @ StringImpl, two @ StringImpl) : Int
  lang_string_compare(one, two) as Int


def num-items(s @ StringImpl) : Ordinal
    lang_string_length(s) as Ordinal


def slice(s @ StringImpl, idx @ Ordinal) : Char
  lang_string_char_at_index(s, idx).to-char


def slice*(str @ StringImpl, from @ Ordinal, to @ Ordinal) : String
  StringSlice(str, from, to)


------------------------------------------------------------------------------
-- Generic implementations for Strings
------------------------------------------------------------------------------

def compare(one @ String, two @ String) : Int
  let result : Int = 0

  for (i : UInt in 0u .. one.num-items - 1,
       j : UInt in 0u .. two.num-items - 1,
       result == 0) {
    result = (one[i] <=> two[j])
  }

  if (result == 0)
    one.num-items <=> two.num-items
  else
    result


def empty?(str @ String) : Bool
  ~ Indicate whether @var{str} is an empty string. ~
  str.num-items == 0u

def length(str @ String) : Ordinal
    str.num-items

def concat(left @ String, right @ String) : String
  let t = allocate_string_n(left.num-items + right.num-items, \space) as String
  let j = 0u

  if (left.num-items > 0u) {
    for (i : UInt in 0u .. left.num-items - 1) {
      lang_string_set_char_at_index(t, j, left[i])
      j = j + 1u
    }
  }

  if (right.num-items > 0u) {
    for (i : UInt in 0u .. right.num-items - 1) {
      lang_string_set_char_at_index(t, j, right[i])
      j = j + 1u
    }
  }

  t


------------------------------------------------------------------------------
-- Slice special for string
------------------------------------------------------------------------------

def num-items(sl @ StringSlice) : Ordinal
  sl^to - sl^from

def slice(sl @ StringSlice, idx @ Ordinal) : Char
  sl^str[sl^from + idx]

def slice*(sl @ StringSlice, from @ Ordinal, to @ Ordinal) : String
--  if (from > sl.num-items or to > sl.num-items)
--    OutOfBoundsException(sl.num-items, from, to).raise
  StringSlice(sl^str, sl^from + from, sl^from + to)



-- end of impl/string
