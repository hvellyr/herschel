-- This file is part of the herschel package 
--
-- Copyright (c) 2010-2019 Gregor Klinke
-- All rights reserved.
--
-- This source code is released under the BSD License.

def realloc(array @ ^'T[],
            new-size : Int,
            init-value : 'T = 'T.null-value()) -> 'T[]
{
  if (new-size > array.size()) {
    let t = 'T[](new-size)
    for (i in 0 .. array.size() - 1)
      t[i] = array[i]
    for (i in array.size() .. new-size - 1)
      t[i] = init-value
    t
  }
  else if (new-size < array.size()) {
    let t = 'T[](new-size)
    for (i in 0 .. new-size - 1)
      t[i] = array[i]
    t
  }
  else
    array
}



def assoc(slice : ^Any[], key : ^Keyword) -> ^Any
{
  -- only check until - 2. There's no point in testing slice[num-items(slice) - 1],
  -- since there wouldn't be a parameter following
  for (i in 0 .. num-items(slice) - 2) {
    match (slice[i])
      | k : Keyword -> { if (k == key)
                           return(slice[i + 1])
                         else
                           unspecified
                       }
      | _ : Any -> return(unspecified)
  }

  unspecified as Any
}
