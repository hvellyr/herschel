-- This file is part of the herschel package 
--
-- Copyright (c) 2010-2011 Gregor Klinke
-- All rights reserved.
--
-- This source code is released under the BSD License.

module lang
export public (*)

------------------------------------------------------------------------------
-- Common Union types
------------------------------------------------------------------------------

when ignore {
def type OrdinalOrEof : &(Ordinal, Eof)
    ~ A union type as typically used to either return the number of
    successful processed items or the end of the resource.  A typical usage
    looks like

    @example
    match (port.read(buffer, 0)) @{
      | e : Eof -> outln("reading done")
      | n : Ordinal -> outln("%d items read" % #[n])
    @}
    @end example ~


def type CharOrEof : &(Char, Eof)
    ~ A union type as typically used to either return a read character or
    the end of the resource.  A typical usage looks like

    @example
    match (port.read) @{
      | e : Eof -> outln("reading done")
      | n : Char -> outln("read: %c" % #[n])
    @}
    @end example ~


def type OrdinalOrFalse : &(Ordinal, Bool == false)
    ~ A union type as typically used by find or lookup functions to either
    return the index of an element or indicate failure.~
}

def type Any
def type Object
def type Bool
def type Char
def type Keyword


when ignore {
def generic equal?(left @ 'T, right @ 'V) : Bool ...
    ~ Indicates whether @var{left} and @var{right} are equal. ~

def generic unequal?(left @ 'T, right @ 'V) : Bool ...
    ~ Indicates whether @var{left} and @var{right} are not equal. ~

def generic less?(left @ 'T, right @ 'V) : Bool ...
    ~ Indicates whether @var{left} is less than @var{right}. ~

def generic greater?(left @ 'T, right @ 'V) : Bool ...
    ~ Indicates whether @var{left} is greater than @var{right}. ~

def generic less-equal?(left @ 'T, right @ 'V) : Bool ...
    ~ Indicates whether @var{left} is less than or equal to @var{right}. ~

def generic greater-equal?(left @ 'T, right @ 'V) : Bool ...
    ~ Indicates whether @var{left} is greater than or equal to @var{right}. ~

-- def generic compare(left @ 'T, right @ 'V) : Int ...
--     ~ Compares @var{left} with @var{right} and returns a negative integer
-- if @var{left} is less than @var{right}, a zero if it is equal and a
-- positive integer if is greater. ~
}

-- end of types.h7
