-- This file is part of the herschel package
--
-- Copyright (c) 2010-2011 Gregor Klinke
-- All rights reserved.
--
-- This source code is released under the BSD License.

module lang
export public(Iterator, RewindableIterator,
              more?, next, rewind)

def type Iterator<T>

def generic more?(iter @ Iterator<'T>) -> Bool ...
    ~ Indicates whether there're more element in @var{iter} which can be
    requested with @code{next}.

    @returns @const{true} if there are more elements to be returned by
             @code{next}. ~

def generic next(iter @ ^Iterator<'T>) -> 'T ...
    ~ Returns the next element from @var{iter}.

    @returns @const{eof} if all elements has been delivered.  Repeated
             calling of @code{next} returns @const{eof}. ~


def type RewindableIterator<T> : Iterator<T>

def generic rewind(iter @ ^'R) -> ^'R
    where R isa RewindableIterator<'T> ...
    ~ Rewinds @var{iter} to restart with the first item.

    Even if a previous call to @fun{end?} returned true this method must
    reset @var{iter} to deliver that element it returned first.

    @returns @var{iter} ~


-- end of iterator
