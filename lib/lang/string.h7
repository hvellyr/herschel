-- This file is part of the herschel package
--
-- Copyright (c) 2010-2011 Gregor Klinke
-- All rights reserved.
--
-- This source code is released under the BSD License.

module core
export public(*)

import "lang/comparable.h7"
import "lang/copyable.h7"
import "lang/sliceable.h7"


def type String : (Copyable, Comparable, OrderedSliceable<Ordinal, Char>)
    ~ The @type{String} class represents character strings.

    This is the basic string type of which all literal strings in Herschel,
    like @code{"hello world"} are instances.

    Instances of @type{String} are immutable.  Once created they can not be
    changed anymore.

    Strings are always encoded in unicode.  The API is consequently
    character oriented and users should not assume any particular internal
    layout.

    Strings are 0-based and can be of arbitrary length.  They are
    @emph{not} 0-terminated, i.e. strings can easily contain binary data
    (as far as representable as Unicode characters). ~

def generic length(str @ String) : Ordinal ...
  ~ Returns the length of @var{str} in characters. ~

def generic empty?(str @ String) : Bool ...
  ~ Indicate whether @var{str} is an empty string. ~

def generic starts-with?(haystack @ String, needle @ String,
                         start-from : Ordinal = 0) : Bool ...
def generic ends-with?(haystack @ String, needle @ String,
                       start-from : Ordinal = 0) : Bool ...
def generic contains?(haystack @ String, needle @ String,
                      start-from : Ordinal = 0) : Bool ...

def generic index-of(haystack @ String, str @ needle,
                     start-from : Ordinal = 0) : OrdinalOrFalse ...
def generic last-index-of(haystack @ String, str @ needle,
                          start-from : Ordinal = 0) : OrdinalOrFalse ...
def generic matches(str @ String, re : Regex) : Bool ...

def generic compare-ci(one @ String, two @ String) : Int ...
  ~ Case insensitive comparing. ~




def generic to-char-array(str @ String) : Char[] ...
def generic to-uppercase(str @ String, loc : Locale = nil) : String ...
def generic to-lowercase(str @ String, loc : Locale = nil) : String ...
def generic trim(str @ String) : String ...

def generic split(str @ String, re : Regex) : String[] ...
  ~ Splits @var{str} around the parts matches by the regular expression
  @var{re}. ~

def generic replace(str @ String,
                    old @ 'T, new @ 'T) : String ...
  ~ Returns a copy of @var{str} where all occurances of @var{old} are
  replaced by @var{new}. ~




def slice(str @ String, n @ Ordinal) : Char ...
def slice(str @ String, from @ Ordinal, to @ Ordinal) : Slice<Ordinal, Char> ...
def compare(one @ String, two @ String) : Int ...

def generic to-string(obj @ Any) : String ...
  ~ Creates a string representation of @var{obj}.  The representation is
  not required to be auto-parseable.  Depending on the kind of object the
  return value's sole purpose may be debugging. ~


-- end of string
