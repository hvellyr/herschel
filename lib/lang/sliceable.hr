;; This file is part of the herschel package
;;
;; Copyright (c) 2010-2011 Gregor Klinke
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are
;; met:
;;
;; - Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; - Redistributions in binary form must reproduce the above copyright
;;   notice, this list of conditions and the following disclaimer in the
;;   documentation and/or other materials provided with the distribution.
;;
;; - Neither the name of the author nor the names of other contributors may
;;   be used to endorse or promote products derived from this software
;;   without specific prior written permission.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
;; IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
;; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;; PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
;; OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;; PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;; NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

module lang
export public(*)

import "lang/numbers.hr"


;;--------------------------------------------------------------------

def type Sliceable<K, E>
    ~ A @type{Sliceable} represents types which support single-key slice
    access, i.e. index access.  Typical candidates are containers, strings,
    etc. ~

def generic slice(obj @ Sliceable<'K, 'E>, key @ 'K) : 'E
    ~ Returns the element from @var{obj} at position @var{key}.  It may be
    an error if @var{key} points to an non-existing element or
    (depending on the implementing class) is out of bounds of @var{obj}. ~


;;--------------------------------------------------------------------

def type OrderedSliceable<K, E> : Sliceable<K, E>
    ~ An @type{OrderedSliceable} represents types which support
    range-slices. ~

def generic slice*(obj @ OrderedSliceable<'K, 'E>,
                   from @ 'K, to @ 'K) : OrderedSliceable<'K, 'E>
    ~ Returns a new ordered sliceable (probably of different type than
    @var{obj}) containing the elements from @var{from} to @var{to}
    exclusive, i.e. [@var{from}, @var{to}).

    An @type{OutOfBoundsException} should be raised when either @var{from}
    or @var{to} are too large.  When @var{from} is >= @var{to} the
    resulting sliceable is empty. ~

def generic slice-rest(obj @ OrderedSliceable<'K, 'E>,
                       from @ 'K) : OrderedSliceable<'K, 'E>
    ~ Returns a new ordered sliceable (probably of different type than
    @var{obj}) containing all elements from @var{from} to the last element
    in @var{obj} (inclusive).

    If @var{obj} supports a @func{num-items} method this is can be
    implemented as:

    @example
    def slice*(obj, from)
      obj.slice(from, from + obj.num-items)
    @end example ~


;;--------------------------------------------------------------------

def type Sliceable!<K, E> : Sliceable<K, E>
    ~ @type{Sliceable!} represents mutable types with index-access.~

def generic slice!(obj @ ^Sliceable!<'K, 'E>,
                   key @ 'K, value @ 'E) : ^Sliceable!<'K, 'E>
    ~ Sets @var{value} into @var{obj} at position @var{key}.

    @returns @var{obj}. ~


;;--------------------------------------------------------------------

def generic compare(one @ Sliceable<Ordinal, 'T>,
                    two @ Sliceable<Ordinal, 'T>) : Int ...
    ~ Comparing sliceables returns zero if the two arrays are identical,
    otherwise returns the comparison result between the first two differing
    elements.  Zero-length arrays are always identical. ~


;;--------------------------------------------------------------------

def generic num-items(obj @ 'T[]) : (Int >= 0) ...
    ~ return the number of items @var{obj} (an array of 'T). ~

;; end of sliceable.hr

