-- This file is part of the herschel package
--
-- Copyright (c) 2010-2011 Gregor Klinke
-- All rights reserved.
--
-- This source code is released under the BSD License.

export public (
    Type,
    init-functor,
    type-of,
    isa?,
    null-value,
    allocate,
    allocate*,
    on-copy,
    Range)


def type Type<Z>
    ~ The type of types themselves. ~


def generic init-functor(ty @ Type<'T>) -> Function(o : 'T, rest-args ...) -> 'T ...
    ~ Returns the init function for type @var{ty}. ~


def generic type-of(obj @ 'T) -> Type<'T> ...
    ~ Returns the type of an object @var{obj}. ~


def generic isa?(obj @ 'T, ty @ Type<'V>) -> Bool ...
    ~ If @var{obj} is an instance, indicates whether @var{obj} is of type
    @var{ty}.  If @var{obj} is a type or a class itself indicates whether
    @var{obj} is a kind of @var{ty}. ~


------------------------------------------------------------------------------
-- Default value
------------------------------------------------------------------------------

def generic null-value(ty @ Type<'Y>) -> 'Y ...
  ~ Returns the default null value for type @type{T}.~


def generic min-value(ty @ Type<'T>) -> 'T ...
def generic max-value(ty @ Type<'T>) -> 'T ...



------------------------------------------------------------------------------
-- allocation
------------------------------------------------------------------------------

def generic allocate(ty @ Type<'T>) -> 'T ...
    ~ Allocate a new instance of type @var{ty}.  Note that the allocated
    object is not initialized! ~


def generic allocate*(ty @ Type<'X>,
                      value : 'X = 'X.null-value(),
                      sizes ...) -> 'X[] ...
    ~ Allocate an array of @var{ty} with @var{sizes} slots.  Each slot is
    initialized to @var{value}.  The size is computed from all the product of
    all values in @var{sizes}, i.e. three value @code{3, 7, 11} would result
    in (three dimensional) array of 231 slots. ~


------------------------------------------------------------------------------

def on-copy(v : 'T) -> 'T ...

------------------------------------------------------------------------------

-- def type Range<T>

-- module Range
-- {
--   export public (init)

--   def init(range : Range<'T>, from : 'T, to : 'T, step : 'T) -> Range<'T> ...
-- }
