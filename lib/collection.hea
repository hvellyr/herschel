-- This file is part of the heather package 
--
-- Copyright (c) 2006, 2007, 2008 Gregor Klinke
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
-- - Redistributions of source code must retain the above copyright notice,
--   this list of conditions and the following disclaimer.
--
-- - Redistributions in binary form must reproduce the above copyright
--   notice, this list of conditions and the following disclaimer in the
--   documentation and/or other materials provided with the distribution.
--
-- - Neither the name of the author nor the names of other contributors may
--   be used to endorse or promote products derived from this software
--   without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
-- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-- TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
-- PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
-- OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

interface coll ("eyestep/heather 1.0:collections")
export public(ForEachVisitor,
              Collection,
              OrderedCollection,
              SliceableCollection,
              OrderedSliceableCollection,
              Sequence,
              Assoc,
              AssocCollection,
              Set, SortedSet,
              Bag, SortedBag,
              Vector,
              List, Deque,
              HashMap, Tree,
              MultiMap, SortedMultiMap)


------------------------------------------------------------------------------
-- base of all collections
------------------------------------------------------------------------------

def alias ForEachVisitor<T> = Function(elt @ T) : Bool

--! @code{Collection} is the base type for all collection classes in the
--! heather collection framework.  It provides an API of implementation
--! independant functionality available for each container class
def type Collection<T>
{
  def generic add-all(self @ 'C, other @ 'C) : 'C
      where C isa Collection<T> ...
  def generic has-all?(self @ 'C, coll @ 'C) : Bool
      where C isa Collection<T> ...
  def generic retain-all(self @ 'C, coll @ 'C) : 'C
      where C isa Collection<T> ...
  def generic remove-all(self @ 'C, coll @ 'C) : 'C
      where C isa Collection<T> ...

  --! Returns the allocation size of @var{self} in octets
  --!
  --! This method must sum up the allocations size of all contained elements
  --! and its own allocation size.  Note that this methods can never return 0
  def generic size(self @ 'C) : Ordinal
      where C isa Collection<T> ...

  --! Returns the number of contained elements of @var{self}
  def generic num-items(self @ 'C) : Ordinal
      where C isa Collection<T> ...

  --! Indicates whether @var{self} is empty, i.e. does not contain any element
  def generic empty?(self @ 'C) : Bool
      where C isa Collection<T> ...

  --! Removes all contained elements from @var{self}
  --!
  --! => @var{self}
  def generic empty!(self @ 'C) : 'C
      where C isa Collection<T> ...

  --! Indicates whether @var{self} contains the element @var{elt}
  --!
  --! @var{elt} is compared to each contained element using 
  --!
  --!   equal(contained-element, @var{elt})
  def generic contains?(self @ 'C, elt @ T) : Bool
      where C isa Collection<T> ...

  --! Adds @var{elt} to @var{self}
  --!
  --! It is implementation dependant what happens when @var{elt} is already
  --! contained in @var{self}.
  --!
  --! => @var{self}
  def generic add(self @ 'C, elt @ T) : 'C
      where C isa Collection<T> ...

  --! Remove @var{elt} from @var{self}
  --!
  --! The method ignore silently if @var{elt} is not contained in @var{self} at
  --! all.
  --!
  --! => @var{self}
  def generic remove(self @ 'C, elt @ T) : 'C
      where C isa Collection<T> ...

  --! Returns an iterator over the contained elements in @var{self}
  --!
  --! The order of elements delivered by the returned iterator dependants on
  --! the algorithm used by @var{self}.
  def generic iterator(self @ 'C) : Iterator<T>
      where C isa Collection<T> ...


  --! Apply @var{functor} on ach contained element in @var{self}
  --!
  --! => @var{self}
  def generic for-each(self @ 'C, func : ForEachVisitor<T>) : 'C
      where C isa Collection<T> ...
}

------------------------------------------------------------------------------
-- all items are always sorted
------------------------------------------------------------------------------
def type OrderedCollection<T> : Collection<T>
{
  def generic first(self @ 'C) : T
      where C isa OrderedCollection<T> ...
  def generic last(self @ 'C) : T
      where C isa OrderedCollection<T> ...
}


------------------------------------------------------------------------------
-- slice access
------------------------------------------------------------------------------
def type SliceableCollection<K, E>
{
  def generic slice(self @ 'S, key @ K) : E
      where S isa SliceableCollection<K, E> ...
  def generic slice!(self @ 'S, key @ K, value @ E) : 'S
      where S isa SliceableCollection<K, E> ...
}


------------------------------------------------------------------------------
-- slice access with range
------------------------------------------------------------------------------
def type OrderedSliceableCollection<K, E> : SliceableCollection<K, E>
{
  def generic slice(self @ 'C, from @ K, to @ K) : Collection<E>
      where C isa OrderedSliceableCollection<K, E> ...
}


------------------------------------------------------------------------------
-- index access
------------------------------------------------------------------------------
def type Sequence<T> : (Collection<T>,
                        OrderedCollection<T>,
                        OrderedSliceableCollection<Ordinal, T> )
{
  def generic insert(self @ 'S, value @ T, before-index : Ordinal) : 'S
      where S isa Sequence<T> ...
  def generic remove-at(self @ 'S, index : Ordinal) : T
      where S isa Sequence<T> ...

  def generic swap(self @ 'S, from-idx : Ordinal, to-idx : Ordinal) : 'S
      where S isa Sequence<T> ...

  def generic sort(self @ 'S) : 'S
      where S isa Sequence<T> ...
  def generic sort!(self @ 'S) : 'S
      where S isa Sequence<T> ...
  def generic reverse(self @ 'S) : 'S
      where S isa Sequence<T> ...
  def generic reverse!(self @ 'S) : 'S
      where S isa Sequence<T> ...

  def generic index-of(self @ 'S, elt @ T) : OrdinalOrEof
      where S isa Sequence<T> ...
}


------------------------------------------------------------------------------
-- associative collection (key -> value[s])
------------------------------------------------------------------------------

def class Assoc<K, V>(_key : K, _val : V)
{
  slot key : K = _key
  slot value : V = _val
}

def type AssocCollection<K, V> : Collection<Assoc<K, V> >
{
  def generic key-iterator(self @ 'C) : Iterator<K>
      where C isa AssocCollection<K, V> ...
  def generic value-iterator(self @ 'C) : Iterator<K>
      where C isa AssocCollection<K, V> ...

  def generic has-key?(self @ 'C, key @ K) : Bool
      where C isa AssocCollection<K, V> ...
  def generic get(self @ 'C, key @ K) : Value
      where C isa AssocCollection<K, V> ...
  def generic put(self @ 'C, key @ K, value @ V) : 'C
      where C isa AssocCollection<K, V> ...
  def generic remove(self @ 'C, key @ K) : 'C
      where C isa AssocCollection<K, V> ...

  def generic keys(self @ 'C) : Collection<K>
      where C isa AssocCollection<K, V> ...
  def generic values(self @ 'C) : Collection<K>
      where C isa AssocCollection<K, V> ...

  def generic has-all-keys?(self @ 'A, keys @ Collection<K>) : Bool
      where C isa AssocCollection<K, V> ...             ...
  def generic remove-all-keys(self @ 'C, keys @ Collection<K>) : 'C
      where C isa AssocCollection<K, V> ...
  def generic retain-all-keys(self @ 'C, keys @ Collection<K>) : 'C
      where C isa AssocCollection<K, V> ...
}


------------------------------------------------------------------------------
-- default implementations
------------------------------------------------------------------------------

def class Set<T> : Collection<T>
{
  -- todo
}


-- aka TreeSet
def class SortedSet<T> : (OrderedCollection<T>,
                          OrderedSliceableCollection<T, T>)
{
  -- todo
}


-- aka MultiSet
def class Bag<T> : Collection<T>
{
  -- todo
}


-- aka MultiTreeSet
def class SortedBag<T> : (OrderedCollection<T>,
                          OrderedSliceableCollection<T, T>)
{
  -- todo
}


def class Vector<T> : Sequence<T>
{
  -- todo

  def generic resize(self @ Vector<T>) : Vector<T> ...
}




def class List<T> : Sequence<T>
{
  -- todo
}


def class Deque<T> : Sequence<T>
{
  -- todo
}



def class HashMap<K, V> : (AssocCollection<K, V>,
                           SliceableCollection<K, V>)
{
  -- todo
}


def class Tree<K, V> : (AssocCollection<K, V>,
                        OrderedCollection<K>,
                        OrderedSliceableCollection<K, V>)
{
  -- todo
}


def class MultiMap<K, V> : (AssocCollection<K, V>,
                            SliceableCollection<K, V>)
{
  -- todo
}


def class SortedMultiMap<K, V> : (AssocCollection<K, V>,
                                  OrderedCollection<K, V>,
                                  OrderedSliceableCollection<K, V>)
{
  -- todo
}


-- end of collection
