;; This file is part of the herschel package
;;
;; Copyright (c) 2010-2011 Gregor Klinke
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are
;; met:
;;
;; - Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; - Redistributions in binary form must reproduce the above copyright
;;   notice, this list of conditions and the following disclaimer in the
;;   documentation and/or other materials provided with the distribution.
;;
;; - Neither the name of the author nor the names of other contributors may
;;   be used to endorse or promote products derived from this software
;;   without specific prior written permission.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
;; IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
;; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;; PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
;; OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;; PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;; NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

module core ("eyestep/herschel 1.0:core")
export public(nil?, enforce, max, min)


def macro nil?
    ~ Indicates whether its argument is @const{nil}.

    @example
    if (abc.nil?) ...
    @end example ~
{
  { nil?(?val:expr) } -> { ?val == nil }
}


def macro enforce
    ~ Enforces that a value is not @const{nil} before continuing. Otherwise
    it raises an @type{NilException}.  If no specific message is given a
    generic message is created from the expression.

    Instead of writing:

    @example
    let p = foo()
    if (p.nil?)
      NilException("foo() failed").raise
    p.bar
    @end example

    you can write

    @example
    enforce(foo(), "foo() failed").bar
    @end example

    or simply:

    @example
    foo().enforce("foo() failed").bar
    foo().enforce.bar
    @end example ~
{
  { enforce(?val:expr, ?msg:expr) } -> {
                                         {
                                           let tmp = ?val
                                           if (tmp.nil?)
                                             NilException(?msg).raise
                                           else
                                             tmp
                                         }
                                       }
  { enforce(?val:expr) }            -> {
                                         {
                                           let tmp = ?val
                                           if (tmp.nil?)
                                             NilException(?"val" + " failed").raise
                                           else
                                             tmp
                                         }
                                       }
}


def macro saferef
{
  { saferef(?val:expr, ?default:expr) } -> {
                                             {
                                               let tmp = ?val
                                               if (tmp.nil?)
                                                 default
                                               else
                                                 tmp
                                             }
                                           }
}


def macro max
    ~ Returns the larger of two values @var{one} and @var{two}.  Both
    parameters are evaluated once only. ~
{
  { max(?one:expr, ?two:expr) } -> {
                                     {
                                       let tmp1 = ?one
                                       let tmp2 = ?two
                                       if (tmp1 > tmp2)
                                         tmp1
                                       else
                                         tmp2
                                     }
                                   }
}


def macro min
    ~ Returns the smaller of two values @var{one} and @var{two}.  Both
    parameters are evaluated once only. ~
{
  { min(?one:expr, ?two:expr) } -> {
                                     {
                                       let tmp1 = ?one
                                       let tmp2 = ?two
                                       if (tmp1 < tmp2)
                                         tmp1
                                       else
                                         tmp2
                                     }
                                   }
}


;; end of utils
