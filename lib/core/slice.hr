-- This file is part of the herschel package
--
-- Copyright (c) 2010 Gregor Klinke
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
-- - Redistributions of source code must retain the above copyright notice,
--   this list of conditions and the following disclaimer.
--
-- - Redistributions in binary form must reproduce the above copyright
--   notice, this list of conditions and the following disclaimer in the
--   documentation and/or other materials provided with the distribution.
--
-- - Neither the name of the author nor the names of other contributors may
--   be used to endorse or promote products derived from this software
--   without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
-- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-- TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
-- PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
-- OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

module core ("eyestep/herschel 1.0:core")
export public(Slice)

import "core/core.hr"


def class Slice<K, T> : OrderedSliceable<K, T>
    ~ A @type{Slice} is a view on a collection of elements of type @var{T}
    addressed by indices of type @var{K}.  Like an iterator it does
    (normaly) not contain the elements itself.  It is itself sliceable
    again.

    Since a slice is a view and 0-based it translates sub element access
    into the key position metric of the referenced collection. ~
{
  def generic num-items(slice @ Slice<K, T>) : Ordinal ...
      ~ Returns the number of items in @var{slice}. ~

  def generic empty?(slice @ Slice<K, T>) : Bool ...
      ~ Indicates whether @var{slice} is empty. ~

  def generic slice-range(slice @ Slice<K, T>) : Range<K> ...
      ~ Returns the outer range of @var{slice} against the referenced
      container. ~
}

-- end of iterator
