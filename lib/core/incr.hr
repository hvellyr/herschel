;; This file is part of the herschel package
;;
;; Copyright (c) 2010-2011 Gregor Klinke
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are
;; met:
;;
;; - Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; - Redistributions in binary form must reproduce the above copyright
;;   notice, this list of conditions and the following disclaimer in the
;;   documentation and/or other materials provided with the distribution.
;;
;; - Neither the name of the author nor the names of other contributors may
;;   be used to endorse or promote products derived from this software
;;   without specific prior written permission.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
;; IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
;; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;; PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
;; OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;; PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;; NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

module core
export public(incr!, post-incr!,
              decr!, post-decr!)

def macro incr!
{
  { incr!(?place:expr) }               -> { ?place = ?place + 1 }
  { incr!(?place:expr, ?amount:expr) } -> { ?place = ?place + ?amount }
}


def macro post-incr!
{
  { post-incr!(?place:expr) }          -> { { let tmp = ?place
                                              ?place.incr!
                                              tmp } }
  { post-incr!(?place:expr,
               ?amount:expr) }         -> { { let tmp = ?place
                                              ?place.incr!(?amount)
                                              tmp } }
}


def macro decr!
{
  { decr!(?place:expr) }               -> { ?place = ?place - 1 }
  { decr!(?place:expr, ?amount:expr) } -> { ?place = ?place - ?amount }
}


def macro post-decr!
{
  { post-decr!(?place:expr) }          -> { { let tmp = ?place
                                              ?place.decr!
                                              tmp } }
  { post-decr!(?place:expr,
               ?amount:expr) }         -> { { let tmp = ?place
                                              ?place.decr!(?amount)
                                              tmp } }
}

;; end of incr
