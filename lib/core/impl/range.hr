-- This file is part of the herschel package
--
-- Copyright (c) 2010-2011 Gregor Klinke
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
-- - Redistributions of source code must retain the above copyright notice,
--   this list of conditions and the following disclaimer.
--
-- - Redistributions in binary form must reproduce the above copyright
--   notice, this list of conditions and the following disclaimer in the
--   documentation and/or other materials provided with the distribution.
--
-- - Neither the name of the author nor the names of other contributors may
--   be used to endorse or promote products derived from this software
--   without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
-- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-- TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
-- PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
-- OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

module core
export public (*)

import "core/range.hr"


def size(range @ Range<'T>) -> Int
    ~ Returns @var{range}'s size.  This is the distance between last and
  first. ~
  last - first


def center(range @ Range<'T>) -> Int
    ~ Returns @var{range}'s center (rounded to @type{T}'s resolution). ~
  (last + first) / (2 as 'T)


def equal?(one @ 'R, two @ 'R) -> Bool
    where R isa Range<'T>
    ~ Indicates whether @var{one} is equal to @var{two}. ~
  one.first == two.first and one.last == two.last


def unequal?(one @ 'R, two @ 'R) -> Bool
    where R isa Range<'T>
    ~ Indicates whether @var{one} is not equal to @var{two}. ~
  one.first <> two.first or one.last <> two.last


def in-range?(range @ Range<'T>, value @ 'T) -> Bool
    ~ Indicates whether @var{value} is in @var{range}. ~
  if (one.first <= one.last)
    value >= one.first and value <= one.last
  else
    value >= one.last and value <= one.first


def intersect?(one @ 'R, two @ 'R) -> Bool
    where R isa Range<'T>
    ~ Indicates whether @var{one} and @var{two} intersects. ~
  one.first < two.last and two.first < one.last


def intersect(one @ 'R, two @ 'R) -> 'R
    where R isa Range<'T>
    ~ Returns a new range of the intersection of @var{one} and @var{two}. ~
  Range<T>(max(one.first, two.first),
           min(one.last, two.last))

-- end of impl/range
