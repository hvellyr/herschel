-- This file is part of the heather package 
--
-- Copyright (c) 2010 Gregor Klinke
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
-- - Redistributions of source code must retain the above copyright notice,
--   this list of conditions and the following disclaimer.
--
-- - Redistributions in binary form must reproduce the above copyright
--   notice, this list of conditions and the following disclaimer in the
--   documentation and/or other materials provided with the distribution.
--
-- - Neither the name of the author nor the names of other contributors may
--   be used to endorse or promote products derived from this software
--   without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
-- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-- TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
-- PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
-- OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

module core ("eyestep/heather 1.0:core")

import "core/slice.head"


------------------------------------------------------------------------------
-- Slice special for string
------------------------------------------------------------------------------

def class StringSlice(_str : String,
                      _from : Ordinal,
                      _to : Ordinal) : Slice<Ordinal, Char>
{
  def slot str = _str
  def slot from = _from
  def slot to = _to
}


def num-items(sl @ StringSlice) : Ordinal
  sl.str.length


def empty?(sl @ StringSlice) : Bool
  sl.str.empty?


def slice(sl @ StringSlice, idx @ Ordinal) : Char
  sl.str[idx]


def slice(sl @ StringSlice, from @ Ordinal, to @ Ordinal)
          : Slice<Ordinal, Char>
  sl.str.slice(from, to)


------------------------------------------------------------------------------
-- String implementation
------------------------------------------------------------------------------

def length(str @ String) : Ordinal
  str.data.num-items


def empty?(str @ String) : Bool
  str.data.num-items == 0


def slice(str @ String, n @ Ordinal) : Char
  str.data[n]


def slice(str @ String, from @ Ordinal, to @ Ordinal)
          : Slice<Ordinal, Char>
  if (from > str.length or to > str.length)
    OutOfBoundsException(str.length, from, to).raise
  StringSlice(str, from, to)


def compare(one @ String, two @ String) : Int
  one.str <=> two.str

-- end of string.hea
