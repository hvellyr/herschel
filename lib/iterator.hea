-- This file is part of the heather package
--
-- Copyright (c) 2010 Gregor Klinke
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
-- - Redistributions of source code must retain the above copyright notice,
--   this list of conditions and the following disclaimer.
--
-- - Redistributions in binary form must reproduce the above copyright
--   notice, this list of conditions and the following disclaimer in the
--   documentation and/or other materials provided with the distribution.
--
-- - Neither the name of the author nor the names of other contributors may
--   be used to endorse or promote products derived from this software
--   without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
-- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-- TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
-- PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
-- OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


def type Iterator<Elt>
{
  --! Indicates whether @var{iter} is at the end
  --!
  --! => false if there are more elements to be returned by @code{next}
  def meth end?(iter : @Iterator) : Bool ...

  --! Returns the next element from @var{iter}
  --!
  --! => #eof if all elements has been delivered.  Repeated calling of
  --! @code{next} returns #eof
  def meth next(iter : @Iterator) : iter.Type.Elt ...
}


def type RewindableIterator<Elt> : Iterator<Elt>
{
  --! Rewinds @var{iter} to restart with the first item
  --!
  --! Even if a previous call to @code{end?} returned true this method must
  --! reset @var{iter} to deliver that element it returned first.
  --!
  --! => @var{iter}
  def meth rewind(iter : @RewindableIterator) : iter.Type ...
}

-- end of iterator
