-- This file is part of the heather package
--
-- Copyright (c) 2010 Gregor Klinke
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
-- - Redistributions of source code must retain the above copyright notice,
--   this list of conditions and the following disclaimer.
--
-- - Redistributions in binary form must reproduce the above copyright
--   notice, this list of conditions and the following disclaimer in the
--   documentation and/or other materials provided with the distribution.
--
-- - Neither the name of the author nor the names of other contributors may
--   be used to endorse or promote products derived from this software
--   without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
-- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-- TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
-- PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
-- OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

interface io ("eyestep/heather 1.0:io")
export public(*)

------------------------------------------------------------------------------

def type Port<T>
{
  def generic open?(port @ Port<T>) : Bool ...
  def generic close(port @ Port<T>) : Port<T> ...

  def generic flush(port @ Port<T>) : Port<T> ...
}


def type InPort<T> : Port<T>
{
  def generic eof?(port @ InPort<T>) : Bool ...

  def generic read(port @ InPort<T>) : T ...
  def generic read*(port @ InPort<T>,
                    buffer @ T[], offset : Int, items : Int) : Int ...
  def generic skip(port @ InPort<T>) : Int ...
}


def type OutPort<T> : Port<T>
{
  def generic write(port @ OutPort<T>, item @ T) : Int ...
  def generic write*(port @ OutPort<T>,
                     buffer @ T[], offset : Int, items : Int) : Int ...
}


def enum PortCursorWhenceType : Int
{
  current = 0,
  begin   = 1,
  end     = 2
}

def type SeekablePort<T> : Port<T>
{
  def generic truncate(port @ SeekablePort<T>,
                       offset : Int) : SeekablePort<T> ...
  def generic cursor!(port @ SeekablePort<T>,
                      offset : Int,
                      whence : PortCursorWhenceType) : Int ...
  def generic cursor(port @ SeekablePort<T>) : Int ...

  def generic reset(port @ SeekablePort<T>) : Int ...
}


def type RandomAccessPort<T> : (InPort<T>, OutPort<T>, SeekablePort<T>)
{
}


------------------------------------------------------------------------------

def enum FileModeType : UWord
{
  read      = 1h,
  write     = 2h,
  append    = 4h,
  readwrite = read | write
}

def class FilePort(file : String = nil,
                   uri : Uri = nil,
                   truncate? = false,
                   mode : FileModeType = FileModeType.read)
    : RandomAccessPort<Octet>
{
}


------------------------------------------------------------------------------

def class DataPort<T>(buffer : T[] = nil) : RandomAccessPort<T>
{
}


------------------------------------------------------------------------------

def class BufferedInPort<T>(port : InPort<'T>,
                            size : Int = 4096) : InPort<T>
{
}


------------------------------------------------------------------------------

def class BufferedOutPort<T>(port : OutPort<'T>,
                             size : Int = 4096) : OutPort<T>
{
}


------------------------------------------------------------------------------

def class BufferedPort<T>(port : RandomAccessPort<'T>,
                          size : Int = 4096) : RandomAccessPort<T>
{
}


------------------------------------------------------------------------------

def class CharInPort(port : InPort<Char>,
                     encoding : String = "auto") : InPort<Char>
{
}


------------------------------------------------------------------------------

def class CharOutPort(port : OutPort<Char>,
                      encoding : String = "auto") : OutPort<Char>
{
}


-- typical usage:
-- let port = CharInPort(
--   BufferedInPort<Octet>(FilePort(file: fname, mode: #read)),
--   encoding: "utf-8")
-- for (c in port)
--   display(c)


------------------------------------------------------------------------------

def class StringInPort(str : String,
                       offset : Int = 0,
                       items : Int = -1) : InPort<Char>
{
}


------------------------------------------------------------------------------

def class StringOutPort(str : String = nil,
                        offset : Int = 0,
                        max-items : Int = -1) : OutPort<Char>
{
}

-- end of port
