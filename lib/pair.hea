-- This file is part of the heather package 
--
-- Copyright (c) 2006, 2007, 2008 Gregor Klinke
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
-- - Redistributions of source code must retain the above copyright notice,
--   this list of conditions and the following disclaimer.
--
-- - Redistributions in binary form must reproduce the above copyright
--   notice, this list of conditions and the following disclaimer in the
--   documentation and/or other materials provided with the distribution.
--
-- - Neither the name of the author nor the names of other contributors may
--   be used to endorse or promote products derived from this software
--   without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
-- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-- TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
-- PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
-- OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


namespace heather("eyestep/heather 1.0:core")

import(io)

-- Simple LISP like pair/list implementation.
--
-- You can simulate the basic lisp style (cons a b) in heather with Pair(a, b).
def class Pair<Car, Cdr>(car: _car : Car = #nil,
                         cdr: _cdr : Cdr = #nil)
{
  slot car : Car = _car
  slot cdr : Cdr = _cdr
}

def meth pair-cell-to-string(node : @Any, port, func)
  port.writes(" . ")
  port.writes(node.to-string)

def pair-cell-to-string(node : @Pair, port, func)
  port.writes(" ")
  func(node)

def to-string(self : @Pair) : String
  if (self.car == nil? and self.cdr == nil?)
    "()"
  else {
    let port = io|StringPort()
    let printer(p : Pair) {
        port.writes(p.car.to-string)

        let pcdr = p.cdr
        if (not(pcdr == nil?))
          pcdr.pair-cell-to-string(port, printer)
      }

    port.writes("(")
    printer(self)
    port.writes(")")

    port.to-string
  }


def class PairIterator<Elt,
                       AccessorType = (Function(node : Pair<Elt, _.Type>)>(_root, acc)
    : Iterator<Elt>
{
  slot current : Pair<PairType, _.Type> = _root
  slot accessor : AccessorType) = acc
}


def next(self : @PairIterator) : self.Type.Car
   if (not(self.end?)) {
     let value = self.accessor(self.current)
     self.current = self.current.cdr
     value
   }
   else
     #eof

def end?(self : @PairIterator) : Bool
   self.current == #nil or not(self.current.kind-of?(Pair))



--! Returns an iterator over the car branches of a linked nodes
def meth value-iterator(self : @Pair)
  PairIterator<self.Type.Elt,
               AccessorType: (Function(node : self.Type) : self.Type.Elt)>(
    self, #function(node) { node.car })


--! Returns an iterator over all linked nodes by following the cdr chain
def meth iterator(self : @Pair)
  PairIterator<self.Type.Elt,
               AccessorType: (Function(node : self.Type) : self.Type)>(
    self, #function(node) { node })


-- end of Pair
