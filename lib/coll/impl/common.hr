-- This file is part of the herschel package 
--
-- Copyright (c) 2010-2011 Gregor Klinke
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
-- - Redistributions of source code must retain the above copyright notice,
--   this list of conditions and the following disclaimer.
--
-- - Redistributions in binary form must reproduce the above copyright
--   notice, this list of conditions and the following disclaimer in the
--   documentation and/or other materials provided with the distribution.
--
-- - Neither the name of the author nor the names of other contributors may
--   be used to endorse or promote products derived from this software
--   without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
-- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-- TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
-- PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
-- OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

module coll

-- generic implementations for various Collection functions

def add-all!(coll @ ^'C, other-coll @ 'X) -> ^'C
    where C isa Collection<'T>
{
  for (e in other-coll) 
    coll.add!(e)
  coll
}


def has-all?(coll @ 'C, other-coll @ 'X) -> Bool
    where C isa Collection<'T>
{
  for (e in other-coll) {
    if (not coll.contains?(e))
      return(false)
  }
  true
}


def retain-all!(coll @ ^'C, other-coll @ 'X) -> ^'C
    where C isa Collection<'T>
{
  let tmp : Set<'T>

  for (e in coll) {
    if (not other-coll.contains?(e))
      tmp.add!(e)
  }
  coll.remove-all!(tmp)
}


def remove-all!(coll @ ^'C, other-coll @ 'X) -> ^'C
    where C isa Collection<'T>
{
  for (e in other-coll)
    coll.remove!(e)
  coll
}


def for-each(coll @ 'C, func : ForEachVisitor<'T>) -> 'C
    where C isa Collection<'T>
{
  for (e in coll) {
    if (not func(e))
      return(coll)
  }
  coll
}

-- end of impl/common.hr
