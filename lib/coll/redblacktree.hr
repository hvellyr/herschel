-- Copyright (c) 2011 the authors listed at the following URL, and/or
-- the authors of referenced articles or incorporated external code:
-- http://en.literateprograms.org/Red-black_tree_(Java)?action=history&offset=20100112141306
--
-- Permission is hereby granted, free of charge, to any person obtaining
-- a copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to
-- permit persons to whom the Software is furnished to do so, subject to
-- the following conditions:
--
-- The above copyright notice and this permission notice shall be
-- included in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-- IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-- CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-- TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--
-- Retrieved from: http://en.literateprograms.org/Red-black_tree_(Java)?oldid=16622

module coll

export public (RedBlackTree, lookup, insert, delete)

import "lang/assert.hr"

def enum NodeColor : Bool {
  RED   = false
  BLACK = true
}


def class Node<K, V>(key : K, value : V, color : NodeColor,
                     left : Node<K, V>, right : Node<K, V>)
{
  def slot key : K = key
  def slot value : V = value
  def slot left : Node<K, V> = left
  def slot right : Node<K, V> = right
  def slot parent : Node<K, V> = nil
  def slot color : NodeColor = color

  on init(self) {
    if (not left.nil?)
      left.parent = self
    if (not right.nil?)
      right.parent = self
  }
}


def grandparent(self : Node<K, V>) -> Node<K, V> {
  --  on enter(not self.parent.nil?)        -- Not the root node
  --  on enter(not self.parent.parent.nil?) -- Not child of root
  self ^ parent ^ parent
}


def sibling(self : Node<K, V>) -> Node<K, V> {
  -- on enter(not self.parent.nil?)  -- Root node has no sibling
  if (self == self ^ parent ^ left)
    self ^ parent ^ right
  else
    self ^ parent ^ left
}


def uncle(self : Node<K, V>) -> Node<K, V> {
  -- on enter(not self.parent.nil?) -- Root node has no uncle
  -- on enter(not self.parent.parent.nil?) -- Children of root have no uncle
  self ^ parent ^ sibling
}


------------------------------------------------------------------------------

def class RedBlackTree<K, V>()
{
  def slot root : Node<K, V>
}


def node-color(node : Node<'K, 'V>) -> NodeColor {
  if (node.nil?)
    BLACK
  else
    node ^ color
}


def lookup-node(tree @ RedBlackTree<'K, 'V>, key : 'K) -> Node<'K, 'V> {
  let n = tree.root

  for (not n.nil?) {
    let compare-result = key <=> n ^ key
    if (compare-result == 0)
       return(n)
    else if (compare-result < 0)
       n = n ^ left
    else
       n = n ^ right
  }
  else
    nil
}


def lookup(tree @ RedBlackTree<'K, 'V>, key : 'K) -> 'V {
  let n = tree.lookup-node(key)
  if (n.nil?)
    nil
  else
    n ^ value
}


def rotate-left(tree @ RedBlackTree<'K, 'V>, n : Node<'K, 'V>) {
  let r = n ^ right
  tree.replace-node(n, r)
  n ^ right = r ^ left
  if (not nil?(r ^ left))
    r ^ left ^ parent = n
  r ^ left = n
  n ^ parent = r
}


def rotate-right(tree @ RedBlackTree<'K, 'V>, n : Node<'K, 'V>) {
  let l = = n ^ left
  tree.replace-node(n, l)
  n ^ left = l ^ right
  if (no nil?(l ^ right))
    l ^ right ^ parent = n
  l ^ right = n
  n ^ parent = l
}


def replace-node(tree @ RedBlackTree<'K, 'V>,
                 oldn : Node<'K, 'V>, newn : Node<'K, 'V>) {
  if (nil?(oldn ^ parent))
    tree ^ root = newn
  else if (oldn == oldn ^ parent ^left)
    oldn ^ parent ^ left = newn
  else
    oldn ^ parent ^ right = newn

  if (not newn.nil?)
    newn ^ parent = oldn ^ parent
}


def insert(tree @ RedBlackTree<'K, 'V>,
           key : 'K, value : 'V) -> RedBlackTree<'K, 'V> {
  let inserted-node = Node<'K, 'V>(key, value, RED, nil, nil)

  if (root.nil?)
    tree ^ root = inserted-node
  else {
    let n = root
    for () {
      let cmpval = key <=> n ^ key
      if (cmpval == 0) {
        n ^ value = value
        return(tree)
      }
      else if (cmpval < 0) {
        if (nil?(n ^ left)) {
          n ^ left = inserted-node
          break(tree)
        }
        else {
          n = n ^ left
        }
      }
      else {
        if (nil?(n ^ right) {
          n ^ right = insertedNode
          break(tree)
        }
        else {
          n = n ^ right
        }
      }
    }
    inserted-node ^ parent = n
  }

  tree.insert-case1(inserted-node)
  --verifyProperties()
  tree
}


def insert-case1(tree @ RedBlackTree<'K, 'V>, n : Node<'K, 'V>) {
  if (nil?(n ^ parent))
    n ^ color = BLACK
  else
    tree.insertCase2(n)
  unspecified
}


def insert-case2(tree @ RedBlackTree<'K, 'V>, n : Node<'K, 'V>) {
  if (n ^ parent.node-color == BLACK)
    -- Tree is still valid
    return(tree)
  else
      tree.insert-case3(n)
  unspecified
}


def insert-case3(tree @ RedBlackTree<'K, 'V>, n : Node<'K, 'V>) {
  if (n.uncle.node-color == RED) {
    n ^ parent ^ color = BLACK
    n.uncle ^ color = BLACK
    n.grandparent ^ color = RED
    tree.insert-case1(n.grandparent)
  }
  else
    tree.insert-case4(n)
}


def insert-case4(tree @ RedBlackTree<'K, 'V>, n : Node<'K, 'V>) {
  if (n == n ^ parent ^ right and n ^ parent == n.grandparent ^ left) {
    tree.rotate-left(n ^ parent)
    n = n ^ left
  }
  else if (n == n ^ parent ^ left and n ^ parent == n.grandparent ^ right) {
    tree.rotate-right(n ^ parent)
    n = n ^ right
  }
  tree.insert-case5(n)
}


def insert-case5(tree @ RedBlackTree<'K, 'V>, n : Node<'K, 'V>) {
  n ^ parent ^ color = BLACK
  n.grandparent ^ color = RED
  if (n == n ^ parent ^ left and n ^ parent == n.grandparent ^ left) {
    tree.rotate-right(n.grandparent)
  }
  else {
    assert(n == n ^ parent ^ right and n ^ parent == n.grandparent ^ right)
    tree.rotate-left(n.grandparent)
  }
}


def delete(tree @ RedBlackTree<'K, 'V>, key : 'K) -> RedBlackTree<'K, 'V> {
  let n = tree.lookup-node(key)

  if (n.nil?)
    -- Key not found, do nothing
    return(tree)

  if (not nil?(n ^ left) and not nil?(n ^ right)) {
    -- Copy key/value from predecessor and then delete it instead
    let pred = tree.maximum-node(n ^ left)
    n ^ key   = pred ^ key
    n ^ value = pred ^ value
    n = pred
  }

  assert(nil?(n ^ left) or nil?(n ^ right))
  let child = if (nil?(n ^ right)) n ^ left else n ^ right

  if (n.node-color) == BLACK) {
    n ^ color = child.node-color
    tree.delete-case1(n)
  }
  tree.replace-node(n, child)

  if (tree ^ root.node-color == RED)
    tree ^ root ^ color = BLACK

  -- verifyProperties
  tree
}


def maximum-node(tree @ RedBlackTree<'K, 'V>,
                 n : Node<'K, 'V>) -> Node<'K, 'V> {
  -- on enter(not n.nil?)
  let p = n
  for (not nil?(p ^ right))
    p = p ^ right
  p
}


def delete-case1(tree @ RedBlackTree<'K, 'V>,
                 n : Node<'K, 'V>) {
  if (not nil?(n ^ parent))
    tree.delete-case2(n)
  unspecified
}


def delete-case2(tree @ RedBlackTree<'K, 'V>,
                 n : Node<'K, 'V>) {
  if (n.sibling.node-color == RED) {
    n ^ parent ^ color = RED
    n.sibling ^ color = BLACK
    if (n == n ^ parent ^ left)
      tree.rotate-left(n ^ parent)
    else
      tree.rotate-right(n ^ parent)
  }
  tree.delete-case3(n)
}


def delete-case3(tree @ RedBlackTree<'K, 'V>,
                 n : Node<'K, 'V>) {
  if (n ^ parent.node-color == BLACK and
      n.sibling.node-color == BLACK and
      n.sibling ^ left.node-color == BLACK and
      n.sibling() ^ right.node-color == BLACK) {
    n.sibling ^ color = RED
    tree.delete-case1(n ^ parent)
  }
  else
    tree.delete-case4(n)
}


def delete-case4(tree @ RedBlackTree<'K, 'V>,
                 n : Node<'K, 'V>) {
  if (n ^ parent.node-color == RED and
      n.sibling.node-color == BLACK and
      n.sibling ^ left.node-color == BLACK and
      n.sibling() ^ right.node-color == BLACK) {
    n.sibling ^ color = RED
    n ^ parent ^ color = BLACK
  }
  else
    tree.delete-case5(n)
}


def delete-case5(tree @ RedBlackTree<'K, 'V>,
                 n : Node<'K, 'V>) {
  if (n == n ^ parent ^ left and
      node-color(n.sibling) == BLACK and
      node-color(n.sibling ^ left) == RED and
      node-color(n.sibling ^ right) == BLACK) {
    n.sibling ^ color = RED
    n.sibling ^ left ^ color = BLACK
    tree.rotate-right(n.sibling)
  }
  else if (n == n ^ parent ^ right and
           node-color(n.sibling) == BLACK and
           node-color(n.sibling ^ right) == RED and
           node-color(n.sibling ^ left) == BLACK) {
    n.sibling ^ color = RED
    n.sibling ^ right ^ color = BLACK
    tree.rotate-left(n.sibling)
  }
  tree.delete-case6(n)
}


def delete-case6(tree @ RedBlackTree<'K, 'V>,
                 n : Node<'K, 'V>) {
  n.sibling ^ color = node-color(n ^ parent)
  n ^ parent ^ color = BLACK
  if (n == n ^ parent ^ left) {
    assert(node-color(n.sibling ^ right) == RED)
    n.sibling ^ right ^ color = BLACK
    tree.rotate-left(n ^ parent)
  }
  else {
    assert(node-color(n.sibling ^ left) == RED)
    n.sibling ^ left ^ color = BLACK
    tree.rotate-right(n ^ parent)
  }
}

-- end of redblacktree.hr
