-- This file is part of the herschel package
--
-- Copyright (c) 2006, 2007, 2008 Gregor Klinke
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
-- - Redistributions of source code must retain the above copyright notice,
--   this list of conditions and the following disclaimer.
--
-- - Redistributions in binary form must reproduce the above copyright
--   notice, this list of conditions and the following disclaimer in the
--   documentation and/or other materials provided with the distribution.
--
-- - Neither the name of the author nor the names of other contributors may
--   be used to endorse or promote products derived from this software
--   without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
-- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-- TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
-- PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
-- OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

module coll
export public(ForEachVisitor,
              Collection,               Collection!,
              OrderedCollection,
              Sequence,                 Sequence!,
              Assoc,
              AssocCollection,          AssocCollection!,
              Set, SortedSet,           Set!, SortedSet!,
              Bag, SortedBag,           Bag!, SortedBag!,
              Vector,                   Vector!,
              List, Deque,              List!, Deque!,
              HashMap, Tree,            HashMap!, Tree!,
              MultiMap, SortedMultiMap, MultiMap!, SortedMultiMap!)

import "core/sliceable.hr"
import "lang/iterable.hr"
import "lang/iterator.hr"


------------------------------------------------------------------------------
-- base of all collections
------------------------------------------------------------------------------

def alias ForEachVisitor<T> = Function(elt : T) : Bool

def type Collection<T>
    ~ Base type for all collection classes in the herschel collection
    framework.  It provides an API of implementation independant
    functionality available for each container class.~

def generic has-all?(cltn @ 'C, coll @ 'X) : Bool
    where C isa Collection<'T> ...

def generic num-items(cltn @ 'C) : Ordinal
    where C isa Collection<'T> ...
    ~ Returns the number of contained elements of @var{cltn}.~

def generic empty?(cltn @ 'C) : Bool
    where C isa Collection<'T> ...
    ~ Indicates whether @var{cltn} is empty, i.e. does not contain
    any element.~

def generic contains?(cltn @ 'C, elt @ 'T) : Bool
    where C isa Collection<'T> ...
    ~ Indicates whether @var{cltn} contains the element @var{elt}.

    @var{elt} is compared to each contained element using

    @example
    equal(contained-element, @var{elt})
    @end example ~


def generic for-each(cltn @ 'C, func : ForEachVisitor<'T>) : 'C
    where C isa Collection<'T> ...
    ~ Apply @var{functor} on ach contained element in @var{cltn}

    @returns @var{cltn} ~


------------------------------------------------------------------------------
def type Collection!<T> : Collection<T>

def generic add-all!(cltn @ ^'C, other @ 'X) : ^'C
    where C isa Collection!<'T> ...
def generic retain-all!(cltn @ ^'C, coll @ 'X) : ^'C
    where C isa Collection!<'T> ...
def generic remove-all!(cltn @ ^'C, coll @ 'X) : ^'C
    where C isa Collection!<'T> ...

def generic empty!(cltn @ ^'C) : ^'C
    where C isa Collection!<'T> ...
    ~ Removes all contained elements from @var{self}

    @returns @var{cltn}~

def generic add!(cltn @ ^'C, elt @ 'T) : ^'C
    where C isa Collection!<'T> ...
    ~ Adds @var{elt} to @var{cltn}

    It is implementation dependant what happens when @var{elt} is already
    contained in @var{cltn}.

    @returns @var{cltn} ~

def generic remove!(cltn @ ^'C, elt @ 'T) : ^'C
    where C isa Collection!<'T> ...
    ~ Remove @var{elt} from @var{cltn}

    The method ignore silently if @var{elt} is not contained in
    @var{cltn} at all.

    @returns @var{cltn} ~

def generic for-each!(cltn @ ^'C, func : ForEachVisitor<'T>) : ^'C
    where C isa Collection!<'T> ...
    ~ Apply @var{functor} on ach contained element in @var{cltn}

    @returns @var{cltn} ~



------------------------------------------------------------------------------
-- all items are always sorted
------------------------------------------------------------------------------
def type OrderedCollection<T> : Collection<T>

def generic first(cltn @ 'C) : 'T
    where C isa OrderedCollection<'T> ...
def generic last(cltn @ 'C) : 'T
    where C isa OrderedCollection<'T> ...


------------------------------------------------------------------------------
-- index access
------------------------------------------------------------------------------
def type Sequence<T> : (Collection<T>,
                        OrderedCollection<T>,
                        OrderedSliceable<Ordinal, T> )

def generic sort(cltn @ 'S) : 'S
    where S isa Sequence<'T> ...
def generic reverse(cltn @ 'S) : 'S
    where S isa Sequence<'T> ...

def generic index-of(cltn @ 'S, elt @ 'T) : OrdinalOrFalse
    where S isa Sequence<'T> ...


def type Sequence!<T> : (Sequence<T>,
                         Collection!<T>,
                         Sliceable!<Ordinal, T>)

def generic sort!(cltn @ ^'S) : ^'S
    where S isa Sequence!<'T> ...

def generic insert!(cltn @ ^'S, value @ 'T, before-index : Ordinal) : ^'S
    where S isa Sequence!<'T> ...
def generic remove-at!(cltn @ ^'S, index : Ordinal) : 'T
    where S isa Sequence!<'T> ...

def generic swap!(cltn @ ^'S, from-idx : Ordinal, to-idx : Ordinal) : ^'S
    where S isa Sequence!<'T> ...

def generic reverse!(cltn @ ^'S) : ^'S
    where S isa Sequence!<'T> ...


------------------------------------------------------------------------------
-- associative collection (key -> value[s])
------------------------------------------------------------------------------

def class Assoc<K, V>(_key : K, _val : V)
{
  def slot key : K = _key
  def slot value : V = _val
}

def type AssocCollection<K, V> : Collection<Assoc<K, V> >

def generic key-iterator(cltn @ 'C) : Iterator<'K>
    where C isa AssocCollection<'K, 'V> ...
def generic value-iterator(cltn @ 'C) : Iterator<'K>
    where C isa AssocCollection<'K, 'V> ...

def generic has-key?(cltn @ 'C, key @ 'K) : Bool
    where C isa AssocCollection<'K, 'V> ...
def generic get(cltn @ 'C, key @ 'K) : Value
    where C isa AssocCollection<'K, 'V> ...

def generic keys(cltn @ 'C) : Collection<'K>
    where C isa AssocCollection<'K, 'V> ...
def generic values(cltn @ 'C) : Collection<'K>
    where C isa AssocCollection<'K, 'V> ...

def generic has-all-keys?(cltn @ 'A, keys @ Collection<'K>) : Bool
    where C isa AssocCollection<'K, 'V> ...



def type AssocCollection!<K, V> : (AssocCollection<K, V>,
                                   Collection!<Assoc<K, V> >)

def generic put!(cltn @ ^'C, key @ 'K, value @ 'V) : ^'C
    where C isa AssocCollection!<'K, 'V> ...
def generic remove!(cltn @ ^'C, key @ 'K) : ^'C
    where C isa AssocCollection!<'K, 'V> ...

def generic remove-all-keys!(cltn @ ^'C, keys @ Collection<'K>) : ^'C
    where C isa AssocCollection!<'K, 'V> ...
def generic retain-all-keys!(cltn @ ^'C, keys @ Collection<'K>) : ^'C
    where C isa AssocCollection!<'K, 'V> ...



------------------------------------------------------------------------------
-- default implementations
------------------------------------------------------------------------------

def class Set<T> : Collection<T>
{
}


def class Set!<T> : (Set<T>, Collection!<T>)
{
}


-- aka TreeSet
def class SortedSet<T> : (OrderedCollection<T>,
                          OrderedSliceable<T, T>)
{
}


def class SortedSet!<T> : (SortedSet<T>,
                           Collection!<T>,
                           Sliceable!<T, T>)
{
}


-- aka MultiSet
def class Bag<T> : Collection<T>
{
}


def class Bag!<T> : (Bag<T>, Collection!<T>)
{
}


-- aka MultiTreeSet
def class SortedBag<T> : (OrderedCollection<T>,
                          OrderedSliceable<T, T>)
{
}


def class SortedBag!<T> : (SortedBag<T>,
                           Collection!<T>,
                           Sliceable!<T, T>)
{
}


def class Vector<T> : Sequence<T>
    ~ NOTE: Immutable vectors are the type of the static vector notation
    #[...]. ~
{
}


def class Vector!<T> : (Vector<T>, Sequence!<T>)

def generic resize!(cltn @ ^'C, new-size : Ordinal,
                    new-value : 'T = Class<'T>.null-value) : ^'C ...
    where C isa Vector<'T>
    ~ Resizes @var{cltn} to @var{new-size} slots.

    After this operation @var{cltn} has exactly @var{new-size} items.  If
    @var{new-size} is identical to the size of @var{cltn} nothing is
    changed.  If @var{new-size} is smaller than the @var{cltn} is clipped
    at the end.  If it is larger new slots are added to the end, which are
    initialized to @var{new-value}. ~


def generic reserve!(cltn @ ^'C, add-items : Ordinal) : ^'C ...
    where C isa Vector<'T>
    ~ Reserve space so that adds and inserts won't lead to reallocations.

    Adds @var{add-items} additional slots so that @var{add-items} items can
    be added or insert without the vector reallocating its underlying data
    structure.  This is only useful for optimizations.  The number of items
    is not changed.

    If @var{add-items} is @const{0} nothing is changed.

    @returns @var{cltn} itself. ~




def class List<T> : Sequence<T>
{
}


def class List!<T> : (List<T>, Sequence!<T>)
{
}


def class Deque<T> : Sequence<T>
{
}


def class Deque!<T> : (Deque<T>, Sequence!<T>)
{
}


def type Map<K, V> : (AssocCollection<K, V>,
                           Sliceable<K, V>)


def type Map!<K, V> : (Map<K, V>,
                       AssocCollection!<K, V>,
                       Sliceable!<K, V>)


def class HashMap<K, V> : Map<K, V>
{
}


def class HashMap!<K, V> : (HashMap<K, V>, Map!<K, V>)
{
}


def class Tree<K, V> : (Map<K, V>,
                        OrderedCollection<K>,
                        OrderedSliceable<K, V>)
{
}


def class Tree!<K, V> : (Tree<K, V>,
                         Map!<K, V>)
{
}


def class MultiMap<K, V> : Map<K, V>
{
}


def class MultiMap!<K, V> : (MultiMap<K, V>,
                             Map!<K, V>)
{
}


def class SortedMultiMap<K, V> : (AssocCollection<K, V>,
                                  OrderedCollection<K, V>,
                                  OrderedSliceable<K, V>)
{
}


def class SortedMultiMap!<K, V> : (SortedMultiMap<K, V>,
                                   AssocCollection!<K, V>,
                                   Sliceable!<K, V>)
{
}


-- end of collection
