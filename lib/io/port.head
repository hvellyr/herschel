-- This file is part of the heather package
--
-- Copyright (c) 2010 Gregor Klinke
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
-- - Redistributions of source code must retain the above copyright notice,
--   this list of conditions and the following disclaimer.
--
-- - Redistributions in binary form must reproduce the above copyright
--   notice, this list of conditions and the following disclaimer in the
--   documentation and/or other materials provided with the distribution.
--
-- - Neither the name of the author nor the names of other contributors may
--   be used to endorse or promote products derived from this software
--   without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
-- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-- TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
-- PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
-- OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

interface io ("eyestep/heather 1.0:io")
export public(*)


--! A generic input-ouput port.
--!
--! Ports are parametrized to the basic object to be read or written.  Most
--! commonly these are Octets or Characters, but technical complex objects
--! are possible, too, of course.
--!
--! Ports has a @dfn{cursor} pointing to the next element to be read or
--! written.  Operations like read, write, and skip implicitely move the
--! cursor; operations like cursor! or reset explicitely set the cursor.
def type Port<T>
{
  --! Indicate whether @var{port} is open for reading or writing
  def generic open?(port @ Port<T>) : Bool ...

  --! Close @var{port} if open.
  --!
  --! @return{} @var{port}
  def generic close(port @ Port<T>) : Port<T> ...

  --! Flush any cached data to or from @var{port}.  If @var{port} is not a
  --! buffering port this is a no-op.
  --!
  --! @return{} @var{port}
  def generic flush(port @ Port<T>) : Port<T> ...
}


--! An input port which reads information from a source.
def type InPort<T> : Port<T>
{
  --! Indicate whether @var{port} has reached its end.
  def generic eof?(port @ InPort<T>) : Bool ...

  --! Read the next element from the current port cursor position.  If
  --! successfull the cursor is moved to the next object which may be the
  --! @const{eof} end-of-file marker.
  --!
  --! The method blocks if @var{port} has currently no further element
  --! available.
  --!
  --! @return{} the read element or @const{eof} if no further element could
  --! be read.
  def generic read(port @ InPort<T>) : &(T, Eof) ...

  --! Read @var{num-items} elements from @var{port} from the current port
  --! cursor position and store them into @var{buffer} beginning from offset
  --! @var{offset}.  @var{buffer} must be large enough to hold all read
  --! elements, otherwise an @type{OutOfBoundsException} is thrown.
  --!
  --! The port cursor is moved ahead by the number of read elements.
  --!
  --! @return{} the number of items read, 0 if no elements are (currently)
  --! available, or @const{eof} if the stream has reached its end.
  def generic read*(port @ InPort<T>,
                    buffer @ T[], offset : Ordinal,
                    num-items : Ordinal)
      : OrdinalOrEof ...

  --! Skip @var{num-items} elements from @var{port} beginning from the
  --! current port cursor position.
  --!
  --! @return{} the number of items skipped, 0 if no elements are
  --! (currently) available to skip, or @const{eof} if the stream has
  --! reached its end.
  def generic skip(port @ InPort<T>) : OrdinalOrEof ...
}


--! A port which outputs elements.
def type OutPort<T> : Port<T>
{
  --! Write one element @var{item} to @var{port} at the current port cursor
  --! position.
  --!
  --! @return{} the number of items written (i.e. always 1)
  def generic write(port @ OutPort<T>, item @ T) : Ordinal ...

  --! Write @var{num-items} elements from @var{buffer} starting at offset
  --! @var{offset} to @var{port}.
  --!
  --! @return{} the number of items written.  Any value other than
  --! @var{num-items} may indicate an error.
  def generic write*(port @ OutPort<T>,
                     buffer @ T[], offset : Ordinal,
                     num-items : Ordinal) : Ordinal ...
}



--! A PortCursor is an abstraction of a position in a port.
def type PortCursor<T>
{
  --! Returns the offset from the port start in octets.
  def generic octet-offset(cursor @ PortCursor<T>) : Ordinal ...

  --! Returns the offset from the port start in number of elements.  If
  --! @code{T == Octet} this is equal to @fun{octet-offset}.
  def generic position(cursor @ PortCursor<T>) : Ordinal ...
}


def enum PortCursorWhenceType : Int
{
  current = 0,
  begin   = 1,
  end     = 2
}


--! A SeekablePort can request and set the file cursor.  Ports have exactly
--! one cursor shared for reading and writing.
def type SeekablePort<T> : Port<T>
{
  --! Set the cursor of @var{port} to @var{offset}, where @var{offset} is
  --! measured in elements T relative to the file start (for @var{whence} ==
  --! PortCursorWhenceType.begin), relative to the file end (for
  --! @var{whence} == PortCursorWhenceType.end), or relative to the current
  --! port cursor position (for @var{whence} ==
  --! PortCursorWhenceType.current).
  --!
  --! @return{} the new cursor position
  def generic cursor!(port @ SeekablePort<T>,
                      offset @ Ordinal,
                      whence : PortCursorWhenceType) : PortCursor<T> ...

  --! Set the cursor of @var{port} to @var{cursor}
  def generic cursor!(port @ SeekablePort<T>,
                      cursor @ PortCursor<T>) : PortCursor<T> ...

  --! Returns the current cursor of @var{port}.
  def generic cursor(port @ SeekablePort<T>) : PortCursor<T> ...

  --! Reset the cursor of port @var{port} to the port start.  This is a
  --! shortcut for @code{cursor!(port, 0, PortCursorWhenceType.begin)}
  def generic reset(port @ SeekablePort<T>) : PortCursor<T> ...
}


--! A port type with full support for input, output and free cursor setting.
def type RandomAccessPort<T> : (InPort<T>, OutPort<T>, SeekablePort<T>)
{
  --! Truncate @var{port}'s underlying representation to the first
  --! @var{num-items} elements.
  --!
  --! @return{} @var{port}
  def generic truncate(port @ SeekablePort<T>,
                       num-items @ Ordinal) : SeekablePort<T> ...
}


------------------------------------------------------------------------------

def enum FileModeType : UWord
{
  read      =  1h,
  write     =  2h,
  append    =  4h,
  create    =  8h,
  exclusive = 16h,
  readwrite = read | write
}


--! A FilePort is the base abstraction of a file stream.
def class FilePort(file : StringOrUri = nil,
                   mode : FileModeType = FileModeType.read,
                   umask : UWord = 0)
    : RandomAccessPort<Octet>
{
}


------------------------------------------------------------------------------

def class DataPort<T>(buffer : T[] = nil) : RandomAccessPort<T>
{
}


------------------------------------------------------------------------------

def class BufferedInPort<T>(port : InPort<T>,
                            buffer-size : Ordinal = 4096) : InPort<T>
{
}


------------------------------------------------------------------------------

def class BufferedOutPort<T>(port : OutPort<T>,
                             buffer-size : Ordinal = 4096) : OutPort<T>
{
}


------------------------------------------------------------------------------

def class BufferedPort<T>(port : RandomAccessPort<T>,
                          buffer-size : Ordinal = 4096) : RandomAccessPort<T>
{
}


------------------------------------------------------------------------------

--! typical usage:
--!
--! @example
--! let port = CharInPort(
--!   BufferedInPort<Octet>(
--!     FilePort(file: fname, mode: FileModeType.read)),
--!   encoding: "utf-8")
--! for (c in port)
--!   display(c)
--! @end example
def class CharInPort(port : InPort<Char>,
                     encoding : String = "auto") : InPort<Char>
{
}


------------------------------------------------------------------------------

def class CharOutPort(port : OutPort<Char>,
                      encoding : String = "auto") : OutPort<Char>
{
}


------------------------------------------------------------------------------

def class StringInPort(str : String,
                       offset : Ordinal = 0,
                       items : Ordinal = 0) : InPort<Char>
{
}


------------------------------------------------------------------------------

def class StringOutPort(str : String = nil,
                        offset : Ordinal = 0,
                        max-items : Ordinal = 0) : OutPort<Char>
{
}

-- end of port
