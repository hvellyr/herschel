- Calling extern-C function with wrong argument number crash hrc

    extern ("C") {
      void exit(int retv);
    }


    def foo()
      exit()


- macros with empty replacement list are not registered?

    def macro assert {
      { assert(?expr:expr) } -> { }
    }

    def foo()
      assert(1 == 1)
      0


- macros don't save their context.  Macros should be hygienic
  by saving the bindings visibile at their declaration point.

    module X
    export public (y)

    import "something.hr"

    def macro y { { y() } -> { symbol-from-something() } }

  In this example the site using the macro y must also import
  something.hr, otherwise symbol-from-something is unknown


- size of array must be constant expression.  Ex.:

    let t : Char[buffer.num-items]

  this produces the totally unusable error message:

    error: Parse error: Bad expression: 566


- char names are tested too early in Tokenizer::mapCharNameToChar; but
  imports are only included in FirstPass::parseImport().  Probably the
  CharNode resolution needs to be deferred.