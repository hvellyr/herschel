module ixwick
module io.ext

def foo() {
  let f : abacap.duru.Foo
  x = abacap.duru.Foo()
  f.abc = 1
  f.xyz.gaz
  f.abc[0].gaz
}


extend module sam.sa.dur {
def bar = 42
}

def const a.b.dada = true
def const .a.b.dada = true

def sam.sa.dur.gaz = 127
def .sam.sa.dur.gaz = 127


def xero.fluffy.fun() ...
def .xero.fluffy.fun() ...


def generic xero.fluffy.fun2(a @ B) ...
def generic .xero.fluffy.fun2(a @ B) ...


def alias geck.Net = abc.Foo
def alias .geck.Net = abc.Foo

def type geck.bart : std.Container
def type .geck.bart : std.Container


def enum gfx.Color ( green, red)
def enum .gfx.Color ( green, red)

def macro std.incr
  | « incr(?v:expr) »               -> « ?v + 1 »
  | « incr(?v:expr, ?amount:expr) » -> « ?v + ?amount »

def m = ext.incr(geck.Net)
def m2 = std.incr(geck.Net)
