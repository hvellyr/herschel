func cat(r reader) {
    const NBUF = 512;
    var buf [NBUF]byte;

    if *rot13Flag {
        r = newRotate13(r)
    }
    for {
        switch nr, er := r.Read(&buf); {
        case nr < 0:
            fmt.Fprintf(os.Stderr, "cat: error reading from %s: %s\n", r.String(), er.String());
            os.Exit(1);
        case nr == 0:  // EOF
            return;
        case nr > 0:
            nw, ew := file.Stdout.Write(buf[0:nr]);
            if nw != nr {
                fmt.Fprintf(os.Stderr, "cat: error writing from %s: %s\n", r.String(), ew.String());
            }
        }
    }
}

def cat(r : reader)
  let nbuf = 512
  let buf : byte[512]

  if (rot13Flag)
    r = new-rotate-13(r)

  while(#t) {
    let nr
    let er = r.read(buf)
    nr = er

    select () {
      (nr < 0) -> { 
        fmt.fprintf(os.stderr, "cat: error reading from %s: %s\nl;" % (r.->string,
                                                                       er.->string))
        os.exit(1)
      }
      (nr == 0) -> return
      (nr > 0) -> {
        let nw
        let ew = file.stdout.write(buf[0 .. nr])
        if (nw <> nr)
          fmt.fprintf(os.stderr, "cat: error writing from %s: %s\n", r.->string,
                      ew.->string)
      }
    }
  }