---  { for (?fp:for-phrases) ?e:expr ?e:opt-else } -> {...}
---
---  for-phrases:
---  {} -> {}
---  { ?lp:loop-phrases ; ?cp:cond-phrases } -> {...}
---  { ?lp:loop-phrases } -> {...}
---  { ?cp:cond-phrases } -> {...}
---
---  loop-phrases:
---  { ?lp:loop-phrase } -> {...}
---  { ?lp:loop-phrase, ?phrs:loop-phrases } -> {...}
---
---  loop-phrase:
---  { ?vd:var-decl ?ie:init-expr } -> {...}
---
---  init-expr:
---  { = ?re:expr } -> {...}
---  { = ?start:expr then ?next:expr } -> {...}
---  { in ?coll:expr } -> {...}
---
---  cond-phrases:
---  { ?cp:cond-phrase } -> {...}
---  { ?cp:cond-phrase, ?phrs:cond-phrases } -> {...}
---
---  cond-phrase:
---  { while: ?w:expr } -> {...}
---  { until: ?u:expr } -> {...}
---
---  opt-else:
---  { } -> { }
---  { else ?e:epxr } -> {...}
---
---  i = 0 .. 100
---  i = self.first then self.next
---  i = collection


--- 0  for -> 1
--- 1  PRO -> 20
--- 2  PRC -> 3
--- 3  expr -> 
--- 4  else -> 5
---    () -> DONE
--- 5  expr -> DONE
--- 20 var-decl -> 21
---    while:   ->
---    until:   ->
--- 
--- 21 = -> 22
---    in -> 25
--- 
--- 22 expr -> 23
--- 23 then -> 24
---    ,    -> 30
---    ;    -> 31
--- 
--- 24 expr -> 30
--- 
--- 25 expr -> 30
--- 
--- 
--- 30 ,    -> 20
---    ;    -> 31
--- 
--- 31 
--- 
--- 
--- 
--- for (i in names.all-keys)
---   outln(i)
--- else
---   false
--- 
--- for (i from 0 below 100 by 2)              for (i = 0 .. 100 by 2)
---   outln(i)                                   outln(i)
--- 
--- for (v = first(keys) then next(keys);      for (i = keys.first then keys.next;
---      while: next?(keys))                        while: keys.next?)
---   outln(i)                                   outln(i)
