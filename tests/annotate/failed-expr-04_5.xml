<?xml version='1.0' encoding='utf-8'?>
<compile-unit xmlns:ty='http://herschel.eyestep.org/types'>
<def>
<func sym='f5'>
<params>
<param sym='a' type='pos'>
<type>
<ty:type nm='lang|UInt16'>
<ty:isa>
<ty:seq>
<ty:ref nm='lang|Int'>
</ty:ref>
<ty:ref nm='lang|Exact'>
</ty:ref>
<ty:ref nm='lang|Bounded'>
</ty:ref>
<ty:ref nm='lang|Unsigned'>
</ty:ref>
</ty:seq>
</ty:isa>
</ty:type>
</type>
</param>
<param sym='b' type='pos'>
<type>
<ty:type nm='lang|Int16'>
<ty:isa>
<ty:seq>
<ty:ref nm='lang|Int'>
</ty:ref>
<ty:ref nm='lang|Exact'>
</ty:ref>
<ty:ref nm='lang|Bounded'>
</ty:ref>
</ty:seq>
</ty:isa>
</ty:type>
</type>
</param>
</params>
<rettype>
<ty:ref nm='lang|Any'>
</ty:ref>
</rettype>
<body>
<block>
<let>
<vardef sym='t0'>
<type>
<ty:ref nm='lang|Any'>
</ty:ref>
</type>
<init>
<binary op='and' ty='lang|Any'>
<binary op='==' ty='lang|Any'>
<symbol  ty='lang|UInt16'>a</symbol>
<int ty='lang|Int'>0</int>
</binary>
<binary op='==' ty='lang|Bool'>
<symbol  ty='lang|Int16'>b</symbol>
<int ty='lang|Int'>5</int>
</binary>
</binary>
</init>
</vardef>
</let>
<let>
<vardef sym='t1'>
<type>
<ty:ref nm='lang|Any'>
</ty:ref>
</type>
<init>
<binary op='or' ty='lang|Any'>
<binary op='==' ty='lang|Any'>
<symbol  ty='lang|UInt16'>a</symbol>
<symbol  ty='lang|Int16'>b</symbol>
</binary>
<binary op='==' ty='lang|Any'>
<symbol  ty='lang|UInt16'>a</symbol>
<symbol  ty='lang|Int16'>b</symbol>
</binary>
</binary>
</init>
</vardef>
</let>
</block>
</body>
</func>
</def>
<def>
<func sym='f6'>
<params>
<param sym='a' type='pos'>
<type>
<ty:type nm='lang|Ordinal'>
<ty:isa>
<ty:seq>
<ty:ref nm='lang|Int'>
<ty:const k='geq'>0</ty:const>
</ty:ref>
<ty:ref nm='lang|BoundedBelow'>
</ty:ref>
<ty:ref nm='lang|Unsigned'>
</ty:ref>
</ty:seq>
</ty:isa>
</ty:type>
</type>
</param>
<param sym='b' type='pos'>
<type>
<ty:type nm='lang|Int'>
<ty:isa>
<ty:ref nm='lang|Number'>
</ty:ref>
</ty:isa>
</ty:type>
</type>
</param>
</params>
<rettype>
<ty:ref nm='lang|Any'>
</ty:ref>
</rettype>
<body>
<block>
<let>
<vardef sym='t0'>
<type>
<ty:ref nm='lang|Any'>
</ty:ref>
</type>
<init>
<binary op='and' ty='lang|Any'>
<binary op='==' ty='lang|Any'>
<symbol  ty='lang|Ordinal'>a</symbol>
<int ty='lang|Int'>0</int>
</binary>
<binary op='==' ty='lang|Bool'>
<symbol  ty='lang|Int'>b</symbol>
<int ty='lang|Int'>5</int>
</binary>
</binary>
</init>
</vardef>
</let>
<let>
<vardef sym='t1'>
<type>
<ty:ref nm='lang|Any'>
</ty:ref>
</type>
<init>
<binary op='or' ty='lang|Any'>
<binary op='==' ty='lang|Any'>
<symbol  ty='lang|Ordinal'>a</symbol>
<symbol  ty='lang|Int'>b</symbol>
</binary>
<binary op='==' ty='lang|Any'>
<symbol  ty='lang|Ordinal'>a</symbol>
<symbol  ty='lang|Int'>b</symbol>
</binary>
</binary>
</init>
</vardef>
</let>
</block>
</body>
</func>
</def>
<ty:node-types>
<ty:used-type>
<ty:ref nm='lang|Any'>
</ty:ref>
</ty:used-type>
<ty:used-type>
<ty:type nm='lang|Int'>
<ty:isa>
<ty:ref nm='lang|Number'>
</ty:ref>
</ty:isa>
</ty:type>
</ty:used-type>
<ty:used-type>
<ty:ref nm='lang|Bool'>
</ty:ref>
</ty:used-type>
<ty:used-type>
<ty:type nm='lang|Int16'>
<ty:isa>
<ty:seq>
<ty:ref nm='lang|Int'>
</ty:ref>
<ty:ref nm='lang|Exact'>
</ty:ref>
<ty:ref nm='lang|Bounded'>
</ty:ref>
</ty:seq>
</ty:isa>
</ty:type>
</ty:used-type>
<ty:used-type>
<ty:type nm='lang|UInt16'>
<ty:isa>
<ty:seq>
<ty:ref nm='lang|Int'>
</ty:ref>
<ty:ref nm='lang|Exact'>
</ty:ref>
<ty:ref nm='lang|Bounded'>
</ty:ref>
<ty:ref nm='lang|Unsigned'>
</ty:ref>
</ty:seq>
</ty:isa>
</ty:type>
</ty:used-type>
<ty:used-type>
<ty:type nm='lang|Ordinal'>
<ty:isa>
<ty:seq>
<ty:ref nm='lang|Int'>
<ty:const k='geq'>0</ty:const>
</ty:ref>
<ty:ref nm='lang|BoundedBelow'>
</ty:ref>
<ty:ref nm='lang|Unsigned'>
</ty:ref>
</ty:seq>
</ty:isa>
</ty:type>
</ty:used-type>
</ty:node-types>
</compile-unit>
