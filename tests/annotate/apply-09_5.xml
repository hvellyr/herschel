<?xml version='1.0' encoding='utf-8'?>
<compile-unit xmlns:ty='http://herschel.eyestep.org/types'>
<def>
<func sym='foo' abstract='true'>
<params>
<param sym='x' type='pos'>
<type>
<ty:seq>
<ty:ref nm='lang|Int32'>
</ty:ref>
<ty:ref gen='t' nm='T'>
</ty:ref>
<ty:ref nm='lang|Bool'>
</ty:ref>
</ty:seq>
</type>
</param>
</params>
<rettype>
<ty:seq>
<ty:ref gen='t' nm='T'>
</ty:ref>
<ty:ref nm='lang|Char'>
</ty:ref>
<ty:ref nm='lang|Bool'>
</ty:ref>
</ty:seq>
</rettype>
</func>
</def>
<def>
<func sym='sep' abstract='true'>
<params>
<param sym='x' type='pos'>
<type>
<ty:seq>
<ty:ref gen='t' nm='Z'>
</ty:ref>
<ty:ref nm='lang|Char'>
</ty:ref>
<ty:ref nm='lang|Bool'>
</ty:ref>
</ty:seq>
</type>
</param>
</params>
<rettype>
<ty:ref gen='t' nm='Z'>
</ty:ref>
</rettype>
</func>
</def>
<def>
<func sym='bar'>
<rettype>
<ty:type nm='lang|String'>
<ty:isa>
<ty:ref nm='lang|Object'>
</ty:ref>
</ty:isa>
</ty:type>
</rettype>
<body>
<block>
<let>
<vardef sym='y'>
<type>
<ty:seq>
<ty:type nm='lang|Int32'>
<ty:isa>
<ty:seq>
<ty:ref nm='lang|Integer'>
</ty:ref>
<ty:ref nm='lang|Exact'>
</ty:ref>
<ty:ref nm='lang|Bounded'>
</ty:ref>
</ty:seq>
</ty:isa>
</ty:type>
<ty:type nm='lang|String'>
<ty:isa>
<ty:ref nm='lang|Object'>
</ty:ref>
</ty:isa>
</ty:type>
<ty:type nm='lang|Bool'>
</ty:type>
</ty:seq>
</type>
</vardef>
</let>
<apply  ty='lang|String'>
<symbol  ty='lambda((&apos;Z, lang|Char, lang|Bool)):&apos;Z' refer='function'>sep</symbol>
<args>
<apply  ty='(lang|String, lang|Char, lang|Bool)'>
<symbol  ty='lambda((lang|Int32, &apos;T, lang|Bool)):(&apos;T, lang|Char, lang|Bool)' refer='function'>foo</symbol>
<args>
<symbol  ty='(lang|Int32, lang|String, lang|Bool)' refer='local'>y</symbol>
</args>
</apply>
</args>
</apply>
</block>
</body>
</func>
</def>
<ty:node-types>
<ty:used-type>
<ty:type nm='lang|String'>
<ty:isa>
<ty:ref nm='lang|Object'>
</ty:ref>
</ty:isa>
</ty:type>
</ty:used-type>
<ty:used-type>
<ty:seq>
<ty:type nm='lang|String'>
<ty:isa>
<ty:ref nm='lang|Object'>
</ty:ref>
</ty:isa>
</ty:type>
<ty:ref nm='lang|Char'>
</ty:ref>
<ty:ref nm='lang|Bool'>
</ty:ref>
</ty:seq>
</ty:used-type>
<ty:used-type>
<ty:seq>
<ty:type nm='lang|Int32'>
<ty:isa>
<ty:seq>
<ty:ref nm='lang|Integer'>
</ty:ref>
<ty:ref nm='lang|Exact'>
</ty:ref>
<ty:ref nm='lang|Bounded'>
</ty:ref>
</ty:seq>
</ty:isa>
</ty:type>
<ty:type nm='lang|String'>
<ty:isa>
<ty:ref nm='lang|Object'>
</ty:ref>
</ty:isa>
</ty:type>
<ty:type nm='lang|Bool'>
</ty:type>
</ty:seq>
</ty:used-type>
<ty:used-type>
<ty:fun nm=''>
<ty:prms>
<ty:prm is='pos'>
<ty:seq>
<ty:ref gen='t' nm='Z'>
</ty:ref>
<ty:ref nm='lang|Char'>
</ty:ref>
<ty:ref nm='lang|Bool'>
</ty:ref>
</ty:seq>
</ty:prm>
</ty:prms>
<ty:ret>
<ty:ref gen='t' nm='Z'>
</ty:ref>
</ty:ret>
</ty:fun>
</ty:used-type>
<ty:used-type>
<ty:fun nm=''>
<ty:prms>
<ty:prm is='pos'>
<ty:seq>
<ty:ref nm='lang|Int32'>
</ty:ref>
<ty:ref gen='t' nm='T'>
</ty:ref>
<ty:ref nm='lang|Bool'>
</ty:ref>
</ty:seq>
</ty:prm>
</ty:prms>
<ty:ret>
<ty:seq>
<ty:ref gen='t' nm='T'>
</ty:ref>
<ty:ref nm='lang|Char'>
</ty:ref>
<ty:ref nm='lang|Bool'>
</ty:ref>
</ty:seq>
</ty:ret>
</ty:fun>
</ty:used-type>
</ty:node-types>
</compile-unit>
