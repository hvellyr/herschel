<?xml version='1.0' encoding='utf-8'?>
<compile-unit xmlns:ty='http://herschel.eyestep.org/types'>
<def>
<func sym='foo'>
<params>
<param sym='a' type='pos'>
<type>
<ty:array ind='0'>
<ty:ref gen='t' nm='T'>
</ty:ref>
</ty:array>
</type>
</param>
</params>
<rettype>
<ty:ref gen='t' nm='T'>
</ty:ref>
</rettype>
<body>
<block>
<let>
<vardef sym='sum'>
<type>
<ty:ref gen='t' nm='T'>
</ty:ref>
</type>
<init>
<int ty='lang|Int32'>0</int>
</init>
</vardef>
</let>
<block>
<let>
<vardef sym='__end_0'>
<type>
<ty:type nm='lang|UInt32'>
<ty:isa>
<ty:seq>
<ty:ref nm='lang|Integer'>
</ty:ref>
<ty:ref nm='lang|Exact'>
</ty:ref>
<ty:ref nm='lang|Bounded'>
</ty:ref>
<ty:ref nm='lang|Unsigned'>
</ty:ref>
</ty:seq>
</ty:isa>
</ty:type>
</type>
<init>
<apply  ty='lang|UInt32'>
<symbol  ty='lambda(&apos;T[]):lang|UInt32' refer='generic'>lang|num-items</symbol>
<args>
<symbol  ty='&apos;T[]' refer='param'>a</symbol>
</args>
</apply>
</init>
</vardef>
</let>
<let>
<vardef sym='i'>
<type>
<ty:type nm='lang|UInt32'>
<ty:isa>
<ty:seq>
<ty:ref nm='lang|Integer'>
</ty:ref>
<ty:ref nm='lang|Exact'>
</ty:ref>
<ty:ref nm='lang|Bounded'>
</ty:ref>
<ty:ref nm='lang|Unsigned'>
</ty:ref>
</ty:seq>
</ty:isa>
</ty:type>
</type>
<init>
<int ty='lang|UInt32'>0</int>
</init>
</vardef>
</let>
<while  ty='lang|UInt32'>
<test>
<binary op='&lt;=' ty='lang|Bool'>
<symbol  ty='lang|UInt32' refer='local'>i</symbol>
<symbol  ty='lang|UInt32' refer='local'>__end_0</symbol>
</binary>
</test>
<body>
<block>
<assign  ty='&apos;T'>
<symbol  ty='&apos;T' refer='local'>sum</symbol>
<binary op='+' ty='&apos;T'>
<symbol  ty='&apos;T' refer='local'>sum</symbol>
<apply  ty='&apos;T'>
<symbol  ty='lambda(lang|Sliceable&lt;&apos;K, &apos;E>, &apos;K):&apos;E' refer='generic'>lang|slice</symbol>
<args>
<symbol  ty='&apos;T[]' refer='param'>a</symbol>
<symbol  ty='lang|UInt32' refer='local'>i</symbol>
</args>
</apply>
</binary>
</assign>
<assign  ty='lang|UInt32'>
<symbol  ty='lang|UInt32' refer='local'>i</symbol>
<binary op='+' ty='lang|UInt32'>
<symbol  ty='lang|UInt32' refer='local'>i</symbol>
<int ty='lang|Int32'>1</int>
</binary>
</assign>
</block>
</body>
</while>
<symbol  ty='lang|Unspecified' refer='global' acc='shared'>lang|unspecified</symbol>
</block>
<symbol  ty='&apos;T' refer='local'>sum</symbol>
</block>
</body>
</func>
</def>
<ty:node-types>
<ty:used-type>
<ty:ref gen='t' nm='T'>
</ty:ref>
</ty:used-type>
<ty:used-type>
<ty:array ind='0'>
<ty:ref gen='t' nm='T'>
</ty:ref>
</ty:array>
</ty:used-type>
<ty:used-type>
<ty:ref nm='lang|Bool'>
</ty:ref>
</ty:used-type>
<ty:used-type>
<ty:type nm='lang|Int32'>
<ty:isa>
<ty:seq>
<ty:ref nm='lang|Integer'>
</ty:ref>
<ty:ref nm='lang|Exact'>
</ty:ref>
<ty:ref nm='lang|Bounded'>
</ty:ref>
</ty:seq>
</ty:isa>
</ty:type>
</ty:used-type>
<ty:used-type>
<ty:type nm='lang|UInt32'>
<ty:isa>
<ty:seq>
<ty:ref nm='lang|Integer'>
</ty:ref>
<ty:ref nm='lang|Exact'>
</ty:ref>
<ty:ref nm='lang|Bounded'>
</ty:ref>
<ty:ref nm='lang|Unsigned'>
</ty:ref>
</ty:seq>
</ty:isa>
</ty:type>
</ty:used-type>
<ty:used-type>
<ty:type nm='lang|Unspecified'>
<ty:isa>
<ty:ref nm='lang|Object'>
</ty:ref>
</ty:isa>
</ty:type>
</ty:used-type>
<ty:used-type>
<ty:fun nm=''>
<ty:prms>
<ty:prm is='pos' spec='t'>
<ty:array ind='0'>
<ty:ref gen='t' nm='T'>
</ty:ref>
</ty:array>
</ty:prm>
</ty:prms>
<ty:ret>
<ty:type nm='lang|UInt32'>
<ty:isa>
<ty:seq>
<ty:ref nm='lang|Integer'>
</ty:ref>
<ty:ref nm='lang|Exact'>
</ty:ref>
<ty:ref nm='lang|Bounded'>
</ty:ref>
<ty:ref nm='lang|Unsigned'>
</ty:ref>
</ty:seq>
</ty:isa>
</ty:type>
</ty:ret>
</ty:fun>
</ty:used-type>
<ty:used-type>
<ty:fun nm=''>
<ty:prms>
<ty:prm is='pos' spec='t'>
<ty:ref nm='lang|Sliceable'>
<ty:gen>
<ty:ref gen='t' nm='K'>
</ty:ref>
<ty:ref gen='t' nm='E'>
</ty:ref>
</ty:gen>
</ty:ref>
</ty:prm>
<ty:prm is='pos' spec='t'>
<ty:ref gen='t' nm='K'>
</ty:ref>
</ty:prm>
</ty:prms>
<ty:ret>
<ty:ref gen='t' nm='E'>
</ty:ref>
</ty:ret>
</ty:fun>
</ty:used-type>
</ty:node-types>
</compile-unit>
