<?xml version='1.0' encoding='utf-8'?>
<compile-unit xmlns:ty='http://heather.eyestep.org/types'>
<def>
<func sym='f0'>
<params>
<param sym='k' type='pos'>
<type>
<ty:ref nm='lang|Any'>
</ty:ref>
</type>
</param>
</params>
<rettype>
<ty:ref nm='lang|Any'>
</ty:ref>
</rettype>
<body>
<block>
<let>
<vardef sym='__end_0'>
<init>
<binary op='-'>
<symbol>k</symbol>
<int ty='lang|Int'>1</int>
</binary>
</init>
</vardef>
</let>
<let>
<vardef sym='i'>
<init>
<int ty='lang|Int'>0</int>
</init>
</vardef>
</let>
<let>
<vardef sym='__return_1'>
<type>
<ty:union>
<ty:ref nm='lang|Any'>
</ty:ref>
<ty:ref nm='lang|Unspecified'>
</ty:ref>
</ty:union>
</type>
<init>
<false/>
</init>
</vardef>
</let>
<while>
<test>
<binary op='&lt;='>
<symbol>i</symbol>
<symbol>__end_0</symbol>
</binary>
</test>
<body>
<block>
<assign>
<symbol>__return_1</symbol>
<apply>
<symbol>outln</symbol>
<args>
<symbol>i</symbol>
</args>
</apply>
</assign>
<assign>
<symbol>i</symbol>
<binary op='+'>
<symbol>i</symbol>
<int ty='lang|Int'>1</int>
</binary>
</assign>
</block>
</body>
</while>
<symbol>__return_1</symbol>
</block>
</body>
</func>
</def>
<def>
<func sym='f1'>
<params>
<param sym='k' type='pos'>
<type>
<ty:ref nm='lang|Any'>
</ty:ref>
</type>
</param>
</params>
<rettype>
<ty:ref nm='lang|Any'>
</ty:ref>
</rettype>
<body>
<block>
<let>
<vardef sym='__end_2'>
<init>
<binary op='-'>
<symbol>k</symbol>
<int ty='lang|Int'>1</int>
</binary>
</init>
</vardef>
</let>
<let>
<vardef sym='i'>
<init>
<int ty='lang|Int'>0</int>
</init>
</vardef>
</let>
<let>
<vardef sym='__return_3'>
<type>
<ty:union>
<ty:ref nm='lang|Any'>
</ty:ref>
<ty:ref nm='lang|Unspecified'>
</ty:ref>
</ty:union>
</type>
<init>
<false/>
</init>
</vardef>
</let>
<while>
<test>
<binary op='&lt;='>
<symbol>i</symbol>
<symbol>__end_2</symbol>
</binary>
</test>
<body>
<block>
<assign>
<symbol>__return_3</symbol>
<apply>
<symbol>outln</symbol>
<args>
<symbol>i</symbol>
</args>
</apply>
</assign>
<assign>
<symbol>i</symbol>
<binary op='+'>
<symbol>i</symbol>
<int ty='lang|Int'>2</int>
</binary>
</assign>
</block>
</body>
</while>
<symbol>__return_3</symbol>
</block>
</body>
</func>
</def>
<def>
<func sym='f2'>
<params>
<param sym='k' type='pos'>
<type>
<ty:ref nm='lang|Any'>
</ty:ref>
</type>
</param>
</params>
<rettype>
<ty:ref nm='lang|Any'>
</ty:ref>
</rettype>
<body>
<block>
<let>
<vardef sym='__end_4'>
<init>
<binary op='-'>
<symbol>k</symbol>
<int ty='lang|Int'>1</int>
</binary>
</init>
</vardef>
</let>
<let>
<vardef sym='i'>
<init>
<int ty='lang|Int'>0</int>
</init>
</vardef>
</let>
<let>
<vardef sym='__return_5'>
<type>
<ty:union>
<ty:ref nm='lang|Any'>
</ty:ref>
<ty:ref nm='lang|Unspecified'>
</ty:ref>
</ty:union>
</type>
<init>
<symbol>lang|unspecified</symbol>
</init>
</vardef>
</let>
<while>
<test>
<binary op='&lt;='>
<symbol>i</symbol>
<symbol>__end_4</symbol>
</binary>
</test>
<body>
<block>
<assign>
<symbol>__return_5</symbol>
<apply>
<symbol>outln</symbol>
<args>
<symbol>i</symbol>
</args>
</apply>
</assign>
<assign>
<symbol>i</symbol>
<binary op='+'>
<symbol>i</symbol>
<int ty='lang|Int'>2</int>
</binary>
</assign>
</block>
</body>
</while>
<symbol>__return_5</symbol>
</block>
</body>
</func>
</def>
<def>
<func sym='fd0'>
<params>
<param sym='k' type='pos'>
<type>
<ty:ref nm='lang|Any'>
</ty:ref>
</type>
</param>
</params>
<rettype>
<ty:ref nm='lang|Any'>
</ty:ref>
</rettype>
<body>
<block>
<let>
<vardef sym='i'>
<init>
<int ty='lang|Int'>100</int>
</init>
</vardef>
</let>
<let>
<vardef sym='__return_6'>
<type>
<ty:union>
<ty:ref nm='lang|Any'>
</ty:ref>
<ty:ref nm='lang|Unspecified'>
</ty:ref>
</ty:union>
</type>
<init>
<symbol>lang|unspecified</symbol>
</init>
</vardef>
</let>
<while>
<test>
<binary op='>='>
<symbol>i</symbol>
<int ty='lang|Int'>0</int>
</binary>
</test>
<body>
<block>
<assign>
<symbol>__return_6</symbol>
<apply>
<symbol>outln</symbol>
<args>
<symbol>i</symbol>
</args>
</apply>
</assign>
<assign>
<symbol>i</symbol>
<binary op='+'>
<symbol>i</symbol>
<int ty='lang|Int'>-1</int>
</binary>
</assign>
</block>
</body>
</while>
<symbol>__return_6</symbol>
</block>
</body>
</func>
</def>
<def>
<func sym='fd1'>
<params>
<param sym='k' type='pos'>
<type>
<ty:ref nm='lang|Any'>
</ty:ref>
</type>
</param>
</params>
<rettype>
<ty:ref nm='lang|Any'>
</ty:ref>
</rettype>
<body>
<block>
<let>
<vardef sym='i'>
<init>
<int ty='lang|Int'>100</int>
</init>
</vardef>
</let>
<let>
<vardef sym='__return_7'>
<type>
<ty:union>
<ty:ref nm='lang|Any'>
</ty:ref>
<ty:ref nm='lang|Unspecified'>
</ty:ref>
</ty:union>
</type>
<init>
<symbol>lang|unspecified</symbol>
</init>
</vardef>
</let>
<while>
<test>
<binary op='>='>
<symbol>i</symbol>
<int ty='lang|Int'>0</int>
</binary>
</test>
<body>
<block>
<assign>
<symbol>__return_7</symbol>
<apply>
<symbol>outln</symbol>
<args>
<symbol>i</symbol>
</args>
</apply>
</assign>
<assign>
<symbol>i</symbol>
<binary op='+'>
<symbol>i</symbol>
<int ty='lang|Int'>-2</int>
</binary>
</assign>
</block>
</body>
</while>
<symbol>__return_7</symbol>
</block>
</body>
</func>
</def>
<def>
<func sym='fx0'>
<params>
<param sym='k' type='pos'>
<type>
<ty:ref nm='lang|Any'>
</ty:ref>
</type>
</param>
</params>
<rettype>
<ty:ref nm='lang|Any'>
</ty:ref>
</rettype>
<body>
<block>
<let>
<vardef sym='__step_8'>
<init>
<symbol>k</symbol>
</init>
</vardef>
</let>
<let>
<vardef sym='i'>
<init>
<int ty='lang|Int'>100</int>
</init>
</vardef>
</let>
<let>
<vardef sym='__abs_i_10'>
<init>
<if>
<test>
<binary op='&lt;'>
<symbol>i</symbol>
<int ty='lang|Int'>0</int>
</binary>
</test>
<then>
<symbol>i</symbol>
</then>
<else>
<int ty='lang|Int'>0</int>
</else>
</if>
</init>
</vardef>
</let>
<let>
<vardef sym='__abs_end_9'>
<init>
<if>
<test>
<binary op='&lt;'>
<symbol>i</symbol>
<int ty='lang|Int'>0</int>
</binary>
</test>
<then>
<int ty='lang|Int'>0</int>
</then>
<else>
<symbol>i</symbol>
</else>
</if>
</init>
</vardef>
</let>
<let>
<vardef sym='__abs_step_11'>
<init>
<if>
<test>
<binary op='&lt;'>
<symbol>__step_8</symbol>
<int ty='lang|Int'>0</int>
</binary>
</test>
<then>
<neg>
<symbol>__step_8</symbol>
</neg>
</then>
<else>
<symbol>__step_8</symbol>
</else>
</if>
</init>
</vardef>
</let>
<let>
<vardef sym='__return_12'>
<type>
<ty:union>
<ty:ref nm='lang|Any'>
</ty:ref>
<ty:ref nm='lang|Unspecified'>
</ty:ref>
</ty:union>
</type>
<init>
<symbol>lang|unspecified</symbol>
</init>
</vardef>
</let>
<while>
<test>
<binary op='&lt;='>
<symbol>__abs_i_10</symbol>
<symbol>__abs_end_9</symbol>
</binary>
</test>
<body>
<block>
<assign>
<symbol>__return_12</symbol>
<apply>
<symbol>outln</symbol>
<args>
<symbol>i</symbol>
</args>
</apply>
</assign>
<assign>
<symbol>i</symbol>
<binary op='+'>
<symbol>i</symbol>
<symbol>__step_8</symbol>
</binary>
</assign>
<assign>
<symbol>__abs_i_10</symbol>
<binary op='+'>
<symbol>__abs_i_10</symbol>
<symbol>__abs_step_11</symbol>
</binary>
</assign>
</block>
</body>
</while>
<symbol>__return_12</symbol>
</block>
</body>
</func>
</def>
</compile-unit>
