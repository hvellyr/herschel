<?xml version='1.0' encoding='utf-8'?>
<compile-unit xmlns:ty='http://heather.eyestep.org/types'>
<def>
<func sym='f0'>
<params>
<param sym='k' type='pos'>
<type>
<ty:ref nm='lang|Any'>
</ty:ref>
</type>
</param>
<param sym='m' type='pos'>
<type>
<ty:ref nm='lang|Any'>
</ty:ref>
</type>
</param>
</params>
<rettype>
<ty:ref nm='lang|Any'>
</ty:ref>
</rettype>
<body>
<block>
<let>
<vardef sym='__return_0'>
<type>
<ty:union>
<ty:ref nm='lang|Any'>
</ty:ref>
<ty:ref nm='lang|Unspecified'>
</ty:ref>
</ty:union>
</type>
<init>
<symbol>eof</symbol>
</init>
</vardef>
</let>
<while>
<test>
<binary op='>'>
<symbol>k</symbol>
<symbol>m</symbol>
</binary>
</test>
<body>
<block>
<assign>
<symbol>__return_0</symbol>
<apply>
<symbol>do-something</symbol>
<args>
<symbol>k</symbol>
<symbol>m</symbol>
</args>
</apply>
</assign>
</block>
</body>
</while>
<symbol>__return_0</symbol>
</block>
</body>
</func>
</def>
<def>
<func sym='f1'>
<params>
<param sym='k' type='pos'>
<type>
<ty:ref nm='lang|Any'>
</ty:ref>
</type>
</param>
<param sym='m' type='pos'>
<type>
<ty:ref nm='lang|Any'>
</ty:ref>
</type>
</param>
</params>
<rettype>
<ty:ref nm='lang|Any'>
</ty:ref>
</rettype>
<body>
<block>
<let>
<vardef sym='i'>
<init>
<int ty='lang|Int'>0</int>
</init>
</vardef>
</let>
<let>
<vardef sym='__return_1'>
<type>
<ty:union>
<ty:ref nm='lang|Any'>
</ty:ref>
<ty:ref nm='lang|Unspecified'>
</ty:ref>
</ty:union>
</type>
<init>
<symbol>eof</symbol>
</init>
</vardef>
</let>
<while>
<test>
<binary op='&lt;>'>
<binary op='mod'>
<symbol>i</symbol>
<int ty='lang|Int'>211</int>
</binary>
<symbol>m</symbol>
</binary>
</test>
<body>
<block>
<assign>
<symbol>__return_1</symbol>
<if>
<test>
<binary op='=='>
<symbol>k</symbol>
<symbol>m</symbol>
</binary>
</test>
<then>
<apply>
<symbol>outln</symbol>
<args>
<str>+</str>
</args>
</apply>
</then>
<else>
<apply>
<symbol>outln</symbol>
<args>
<str>-</str>
</args>
</apply>
</else>
</if>
</assign>
<assign>
<symbol>i</symbol>
<binary op='+'>
<symbol>i</symbol>
<int ty='lang|Int'>1</int>
</binary>
</assign>
</block>
</body>
</while>
<symbol>__return_1</symbol>
</block>
</body>
</func>
</def>
</compile-unit>
