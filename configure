#!/bin/sh
#configure - basic software configuration for herschel
# -*-sh-*-

errstatus=0
dirmode=""
failure=no
verbose=no
srcdir=

pkgname=herschel
default_prefix=/usr/local

usage="\
Usage: $0 [-h] [--help] [--version] [OPTIONS]

Configures this package for building.

Options
  -h --help                display this help and exit
     --version             display version of this script and exit
     --verbose             display more details during configuration

  --srcdir=DIR             specify where the sources are

Architecture
  --target-arch=ARCH       specify the target architecture to run on
  --target-os=OS           specify the target platform to run on

Installation directories
  --prefix=PREFIX          install architecture independant files in PREFIX
                           [default: $default_prefix]
  --exec-prefix=EPREFIX    install architecture dependant files in EPREFIX
                           [default: PREFIX]
  --bindir=DIR             user executables [EPREFIX/bin]
  --libdir                 libraries [EXEC_PREFIX/lib]
  --pkglibdir              package specific libraries [LIBDIR/$pkgname]
  --includedir             C header files [PREFIX/include]
  --pkgincludedir          packages specific C header files
                           [PREFIX/include/$pkgname]
  --datadir                readonly architecture independant files
                           [PREFIX/share]
  --pkgdatadir             package specific readonly files
                           [PREFIX/share/$pkgname]
  --mandir                 man documentation [PREFIX/man]

Configure the build
  --disable-FEATURE        do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]   include FEATURE [ARG=yes]

  --enable-dist-release    configure for distribution release.  Turns off
                           'unittests'
  --enable-unittests       include unittest code [yes]
  --enable-traces          include traces for debug code [yes]

  --with-llvm-config=PATH  path to llvm-config [auto]

Report bugs to <bug-herschel@eyestep.org>."

case $(echo "testing\c"; echo 1,2,3),$(echo -n testing; echo 1,2,3) in
  *c*,-n*) ECHO_N= ECHO_C='
' ECHO_T='  ' ;;
  *c*,*  ) ECHO_N=-n ECHO_C= ECHO_T= ;;
  *)       ECHO_N= ECHO_C='\c' ECHO_T= ;;
esac


# initialize variables
enable_dist_release=no
enable_unittests=yes
enable_traces=yes
llvm_config_path=auto
target_arch=auto
target_os=auto
target_osver=
compile_inplace=no

# paths
prefix=NONE
exec_prefix=NONE
bindir='${exec_prefix}/bin'
libdir='${exec_prefix}/lib'
pkglibdir='${libdir}/'$pkgname
includedir='${prefix}/include'
pkgincludedir='${prefix}/include/'$pkgname
datadir='${prefix}/share'
pkgdatadir='${prefix}/share/'$pkgname
mandir='${prefix}/man'

# process command line arguments
while test $# -gt 0 ; do
  case $1 in
    -h | --help | --h*)         # -h for help
      echo "$usage"
      exit 0
      ;;
    --version)
      echo "$0 $scriptversion"
      exit 0
      ;;
    --verbose)
      verbose=yes
      shift
      ;;

    --srcdir=*)
      srcdir=$(expr "x$1" : 'x[^=]*=\(.*\)')
      shift
      ;;

    --prefix=*)
      prefix=$(expr "x$1" : 'x[^=]*=\(.*\)')
      shift
      ;;
    --prefix)
      shift
      test $# -eq 0 && { echo "$usage" 1>&2; exit 1; }
      prefix=$1
      shift
      ;;

    --exec-prefix=*|--exec_prefix=*)
      exec-prefix=$(expr "x$1" : 'x[^=]*=\(.*\)')
      shift
      ;;
    --exec-prefix|--exec_prefix)
      shift
      test $# -eq 0 && { echo "$usage" 1>&2; exit 1; }
      exec_prefix=$1
      shift
      ;;

    --bindir=*)
      bindir=$(expr "x$1" : 'x[^=]*=\(.*\)')
      shift
      ;;
    --bindir)
      shift
      test $# -eq 0 && { echo "$usage" 1>&2; exit 1; }
      bindir=$1
      shift
      ;;

    --libdir=*)
      libdir=$(expr "x$1" : 'x[^=]*=\(.*\)')
      shift
      ;;
    --libdir)
      shift
      test $# -eq 0 && { echo "$usage" 1>&2; exit 1; }
      libdir=$1
      shift
      ;;

    --pkglibdir=*)
      pkglibdir=$(expr "x$1" : 'x[^=]*=\(.*\)')
      shift
      ;;
    --pkglibdir)
      shift
      test $# -eq 0 && { echo "$usage" 1>&2; exit 1; }
      pkglibdir=$1
      shift
      ;;

    --includedir=*)
      includedir=$(expr "x$1" : 'x[^=]*=\(.*\)')
      shift
      ;;
    --includedir)
      shift
      test $# -eq 0 && { echo "$usage" 1>&2; exit 1; }
      includedir=$1
      shift;;

    --pkgincludedir=*)
      pkgincludedir=$(expr "x$1" : 'x[^=]*=\(.*\)')
      shift
      ;;
    --pkgincludedir)
      shift
      test $# -eq 0 && { echo "$usage" 1>&2; exit 1; }
      pkgincludedir=$1
      shift
      ;;

    --datadir=*)
      datadir=$(expr "x$1" : 'x[^=]*=\(.*\)')
      shift
      ;;
    --datadir)
      shift
      test $# -eq 0 && { echo "$usage" 1>&2; exit 1; }
      datadir=$1
      shift
      ;;

    --pkgdatadir=*)
      pkgdatadir=$(expr "x$1" : 'x[^=]*=\(.*\)')
      shift
      ;;
    --pkgdatadir)
      shift
      test $# -eq 0 && { echo "$usage" 1>&2; exit 1; }
      pkgdatadir=$1
      shift
      ;;

    --mandir=*)
      mandir=$(expr "x$1" : 'x[^=]*=\(.*\)')
      shift
      ;;
    --mandir)
      shift
      test $# -eq 0 && { echo "$usage" 1>&2; exit 1; }
      mandir=$1
      shift
      ;;

    --disable-dist-release|--enable-dist-release=no)
      enable_dist_release=no
      shift
      ;;
    --enable-dist-release=yes|--enable-dist-release)
      enable_dist_release=yes
      shift
      ;;

    --disable-unittests|--enable-unittests=no)
      enable_unittests=no
      shift
      ;;
    --enable-unittests=yes|--enable-unittests)
      enable_unittests=yes
      shift
      ;;

    --disable-traces|--enable-traces=no)
      enable_traces=no
      shift;;
    --enable-traces=yes|--enable-traces)
      enable_traces=yes
      shift;;

    --with-llvm-config=*)
      llvm_config_path=$(expr "x$1" : 'x[^=]*=\(.*\)')
      shift;;

    -*)                         # unknown option
      echo "$usage" 1>&2
      exit 1
      ;;
  esac
done


#----------------------------------------------------------------------
# check source dir

echo $ECHO_N "Source are in... $ECHO_C"

if test -z "$srcdir"; then
  srcdir=$(dirname "$0") 2>/dev/null
fi

echo "${ECHO_T}$srcdir"

if test "x$srcdir" = "x."; then
  compile_inplace=yes
fi

#----------------------------------------------------------------------

# normalize path settings
test "x$prefix" = xNONE && prefix=${default_prefix}
test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'

#----------------------------------------------------------------------

buildstyle_flag=debug
unittests_flag=
traces_flag=

if test "x$enable_dist_release" = xyes; then
  enable_unittests=no
  enable_traces=no
  buildstyle_flag=dist-release
  echo "Build for external release"
fi

if test "x$enable_unittests" = xyes; then
  unittests_flag="-DUNITTESTS"
  echo "Enable unit tests... yes"
fi

if test "x$enable_traces" = xyes; then
  traces_flag="-DTRACES"
  echo "Enable debug traces... yes"
fi


#----------------------------------------------------------------------

if test "x$target_arch" = xauto; then
  echo $ECHO_N "Build for architecture... $ECHO_C"
  target_arch=$(sh "$srcdir/build/platform.sh" -a 2>/dev/null)
  echo "${ECHO_T}$target_arch"
fi

if test "x$target_os" = xauto; then
  echo $ECHO_N "Build for OS... $ECHO_C"
  target_os=$(sh "$srcdir/build/platform.sh" -m 2>/dev/null)
  echo "${ECHO_T}$target_os"
fi

echo $ECHO_N "Build for OS version... $ECHO_C"
target_osver=$(sh "$srcdir/build/platform.sh" -r 2>/dev/null)
echo "${ECHO_T}$target_osver"


echo $ECHO_N "Base repository revision... $ECHO_C"
base_rep_revision=$(cd "$srcdir"; sh "build/reprevision.sh" 2>/dev/null)
echo "${ECHO_T}$base_rep_revision"


#----------------------------------------------------------------------

if test "x$llvm_config_path" = xauto; then
  llvm_config_path="$(pwd)"/llvm-config
fi

echo $ECHO_N "Check llvm version... $ECHO_C"
llvm_config_dir=$(dirname "$llvm_config_path")
llvm_config_file=$(basename "$llvm_config_path")
abs_llvm_config_path=$(cd "$llvm_config_dir" && pwd)/"$llvm_config_file"

llvm_version=$("$abs_llvm_config_path" --version 2>/dev/null)
if test "x$llvm_version" = x"2.8"; then
  echo "${ECHO_T}$llvm_version"
else
  echo "${ECHO_T}no matching installation found ($llvm_version)"
  failure=yes
fi

if test "x$failure" = xno; then
  echo $ECHO_N "Check llvm bindir... $ECHO_C"
  llvm_bindir=$("$abs_llvm_config_path" --bindir 2>/dev/null)
  if test "x$llvm_bindir" != x""; then
    echo "${ECHO_T}$llvm_bindir"
  else
    echo "${ECHO_T}no llvm found"
    failure=yes
  fi

  echo $ECHO_N "Get llvm cpp flags... $ECHO_C"
  llvm_cppflags=$("$abs_llvm_config_path" --cppflags backend bitwriter 2>/dev/null)
  if test "x$verbose" = xyes; then
    echo "${ECHO_T}$llvm_cppflags"
  else
    echo "${ECHO_T}ok"
  fi

  echo $ECHO_N "Get llvm linker flags... $ECHO_C"
  llvm_ldflags=$("$abs_llvm_config_path" --ldflags backend bitwriter 2>/dev/null)
  if test "x$verbose" = xyes; then
    echo "${ECHO_T}$llvm_ldflags"
  else
    echo "${ECHO_T}ok"
  fi

  echo $ECHO_N "Get llvm libraries... $ECHO_C"
  llvm_libs=$("$abs_llvm_config_path" --libs backend bitwriter 2>/dev/null)
  if test "x$verbose" = xyes; then
    echo "${ECHO_T}$llvm_libs"
  else
    echo "${ECHO_T}ok"
  fi
fi

# ----------------------------------------------------------------------
# when everything was successful write the configuration

if test "x$failure" = xyes; then
  echo ""
  echo "$pkgname could not be configured correctly.  Check the details"
  echo "above and try again, or configure the Makefile manually."
  exit 1
fi

# ----------------------------------------------------------------------
# write configuration file

generated_file_name=auto-config-local.mk

cat > auto-config-local.mk <<EOF
# automatically created file.  Don't edit this file manually
EOF

cat >> auto-config-local.mk <<EOF
prefix = $prefix
exec_prefix = $exec_prefix
bindir = $bindir
libdir = $libdir
pkglibdir = $pkglibdir
includedir = $includedir
pkgincludedir = $pkgincludedir
datadir = $datadir
pkgdatadir = $pkgdatadir
mandir = $mandir

BUILDSTYLE = $buildstyle_flag
UNITTESTS = $unittests_flag
TRACES = $traces_flag

LLVM_EXE = $llvm_bindir
LLVM_CPPFLAGS = $llvm_cppflags
LLVM_LDFLAGS = $llvm_ldflags
LLVM_LIBS = $llvm_libs

TARGET_OS = $target_os
TARGET_ARCH = $target_arch
TARGET_OSVER = $target_osver

BASE_REP_REVISION = $base_rep_revision

EOF
